{"version":3,"sources":["../../../projects/angular-responsive-carousel/src/lib/touches.ts","../../../projects/angular-responsive-carousel/src/lib/carousel.ts","../../../projects/angular-responsive-carousel/src/lib/container.ts","../../../projects/angular-responsive-carousel/src/lib/cells.ts","../../../projects/angular-responsive-carousel/src/lib/slide.ts","../../../projects/angular-responsive-carousel/src/lib/utils.ts","../../../projects/angular-responsive-carousel/src/lib/carousel.component.ts","../../../projects/angular-responsive-carousel/src/lib/carousel.module.ts"],"names":["Touches","properties","_this","this","eventType","undefined","handlers","startX","startY","lastTap","doubleTapMinTimeout","tapMinTimeout","touchstartTime","i","isMousedown","_touchListeners","touchstart","touchmove","touchend","_mouseListeners","mousedown","mousemove","mouseup","wheel","_otherListeners","resize","handleTouchstart","event","elementPosition","getElementPosition","Date","getTime","getTouchstartPosition","runHandler","handleTouchmove","touches","detectPan","detectPinch","detectLinearSwipe","swipeType","handleLinearSwipe","handleTouchend","detectDoubleTap","detectTap","length","handleMousedown","getMousedownPosition","handleMousemove","handleMouseup","handleWheel","handleResize","element","toggleEventListeners","Object","defineProperty","prototype","touchListeners","mouseListeners","otherListeners","destroy","action","listeners","listener","assign","detectTouchScreen","handler","window","addEventListener","removeEventListener","document","passive","addEventListeners","removeEventListeners","getLinearSwipeType","eventName","response","currentTime","tapLength","clearTimeout","doubleTapTimeout","setTimeout","movementX","Math","abs","moveLeft","moveTop","getBoundingClientRect","clientX","left","clientY","top","index","prefixes","split","query","matchMedia","matches","mq","join","on","Carousel","utils","cells","container","slide","isSlideLengthLimited","isContentImages","isLazyLoad","isContainerLocked","alignCells","initialContainerPosition","containerPullLimit","handleHorizontalSwipe","freeScroll","isNextArrowDisabled","isPrevArrowDisabled","init","cellLength","images","numberOfVisibleCells","overflowCellsLimit","isLightDOM","cellLimit","lightDOM","loop","margin","minSwipeDistance","transitionDuration","transitionTimingFunction","cellWidth","floor","counter","cellLengthInLightDOMMode","updateProperties","cellsElement","visibleWidth","parentElement","clientWidth","clearInterval","autoplayId","lineUpCells","lineUp","handleTransitionend","getImage","next","prev","autoplay","setInterval","autoplayInterval","stopAutoplay","Container","carouselProperties","newPositionIndex","isPositionCorrection","initialPositionX","initialElementPositionX","isLocked","pullLimit","startTime","moveX","isSwipeInProgress","tooFewCells","setWidth","getStartX","getInitialElementPositionX","disabled","getMoveX","move","simpleProcessing","finishMoving","clearInitialValues","positionX","getMovePositionX","isPulled","detectPulled","direction","getDirection","edge","slowdownOnPull","transformPositionX","overflowX","distance","getDistance","currentPositionX","getCurrentPositionX","getEndPosition","_positionX","endPosition","decelerationRatio","rubberPositionX","containerWidth","getWidth","newPositionX","getInertia","getAlignedPositionOnPull","setInitialPosition","inertia","parentPosition","imageUtils","getImages","fullCellWidth","width","value","duration","style","transition","transform","totalImageWidth","position","carouselElementPosition","getCarouselElementPosition","sign","ImageUtils","cellStack","filter","cell","img","Cells","children","getCellPositionInContainer","push","ifSequenceOfCellsIsChanged","cellIndexInDOMTree","getCellIndexInContainer","positionIndex","cellIndex","imageIndex","getImageIndex","file","type","image","setCounter","Slide","slideLength","isSlideInProgress","_counter","distanceAbs","isNotClickOnArrow","visibleCellsOverflowContainer","setVisibleWidth","hostElement","handleSlide","alignContainerFast","customSlideLength","limitSlideLength","getSlideLength","getPreliminaryCounter","isSlidesEnd","getPositionByIndex","select","newCounter","getPositionCorrection","correction","isLastSlide","cellsWidth","getDistanceAbs","imageLength","isLightDOMMode","ifLeftDOMModeAtEnd","getPositionWithoutCorrection","provideSafePosition","remainder","round","fixedContainerPosition","ifLeftDOMModeToBeginning","containerPositionX","flag","remainderOfCells","Utils","isImagesLessCellLimit","ceil","carouselElementPositionX","CarouselComponent","elementRef","ref","minTimeout","isVideoPlaying","_isCounter","_cellWidth","_loop","_lightDOM","isMoving","isNgContent","events","EventEmitter","height","pauseOnHover","dots","objectFit","counterSeparator","cellsToScroll","arrows","arrowsOutside","arrowsTheme","hostClassCarousel","carousel","preventDefault","handleTap","nodes","Array","slice","call","cellElement","srcElement","closest","indexOf","slideCounter","lapCounter","innerWidth","innerHeight","ua","navigator","userAgent","toLowerCase","nativeElement","querySelector","_images","onWindowResize","savedCarouselWidth","onMousemove","onMouseleave","ngOnInit","setDimensions","ngAfterViewInit","initCarousel","getCellLength","dotsArr","fill","detectChanges","carouselWidth","detectDomChanges","ngOnChanges","changes","ngOnDestroy","id","getCellWidth","videoProperties","eventHandler","landscapeMode","isLandscape","MutationObserver","mutations","onDomChanges","observe","attributes","childList","characterData","hostStyleHeight","hostStyleWidth","handleTransitionendCellContainer","target","elementWidth","cellsToShow","Component","args","selector","template","ElementRef","ChangeDetectorRef","Output","Input","HostBinding","HostListener","NgModule","declarations","imports","CommonModule","exports","providers","bootstrap","entryComponents"],"mappings":"oZAaA,IAAAA,EAAA,WA2CI,SAAAA,EAAYC,GAAZ,IAAAC,EAAAC,KAvCAA,KAAAC,eAAuBC,EACvBF,KAAAG,SAAgB,GAChBH,KAAAI,OAAS,EACTJ,KAAAK,OAAS,EACTL,KAAAM,QAAU,EAEVN,KAAAO,oBAAsB,IACtBP,KAAAQ,cAAgB,IAChBR,KAAAS,eAAiB,EACjBT,KAAAU,EAAY,EACZV,KAAAW,aAAc,EAEdX,KAAAY,gBAAuB,CACnBC,WAAc,mBACdC,UAAa,kBACbC,SAAY,kBAEhBf,KAAAgB,gBAAuB,CACnBC,UAAa,kBACbC,UAAa,kBACbC,QAAW,gBACXC,MAAS,eAEbpB,KAAAqB,gBAAuB,CACnBC,OAAU,gBAuFdtB,KAAAuB,iBAAmB,SAACC,GAChBzB,EAAK0B,gBAAkB1B,EAAK2B,qBAC5B3B,EAAKU,gBAAiB,IAAIkB,MAAOC,eAEV1B,IAAnBH,EAAKE,WACLF,EAAK8B,sBAAsBL,GAG/BzB,EAAK+B,WAAW,aAAcN,IAMlCxB,KAAA+B,gBAAkB,SAACP,GACf,IAAMQ,EAAUR,EAAMQ,QAatB,OAVIjC,EAAKkC,UAAUD,IACfjC,EAAK+B,WAAW,MAAON,GAIvBzB,EAAKmC,YAAYV,IACjBzB,EAAK+B,WAAW,QAASN,GAIrBzB,EAAKoC,kBAAkBX,IAC3B,IAAK,mBACDA,EAAMY,UAAY,mBAClBrC,EAAK+B,WAAW,mBAAoBN,GACpC,MACJ,IAAK,iBACDA,EAAMY,UAAY,iBAClBrC,EAAK+B,WAAW,iBAAkBN,IAKtCzB,EAAKoC,kBAAkBX,IACJ,qBAAnBzB,EAAKE,WACc,mBAAnBF,EAAKE,YAELF,EAAKsC,kBAAkBb,IAyB/BxB,KAAAsC,eAAiB,SAACd,GACd,IAAMQ,EAAUR,EAAMQ,QAGlBjC,EAAKwC,mBACLxC,EAAK+B,WAAW,aAAcN,GAIlCzB,EAAKyC,YAELzC,EAAK+B,WAAW,WAAYN,GAC5BzB,EAAKE,UAAY,WAEb+B,GAA8B,IAAnBA,EAAQS,SACnB1C,EAAKE,eAAYC,EACjBH,EAAKW,EAAI,IAOjBV,KAAA0C,gBAAkB,SAAClB,GACfzB,EAAKY,aAAc,EACnBZ,EAAK0B,gBAAkB1B,EAAK2B,qBAC5B3B,EAAKU,gBAAiB,IAAIkB,MAAOC,eAEV1B,IAAnBH,EAAKE,WACLF,EAAK4C,qBAAqBnB,GAG9BzB,EAAK+B,WAAW,YAAaN,IAMjCxB,KAAA4C,gBAAkB,SAACpB,GAGf,GAAKzB,EAAKY,YAAV,CAQA,OAHAZ,EAAK+B,WAAW,MAAON,GAGfzB,EAAKoC,kBAAkBX,IAC3B,IAAK,mBACDA,EAAMY,UAAY,mBAClBrC,EAAK+B,WAAW,mBAAoBN,GACpC,MACJ,IAAK,iBACDA,EAAMY,UAAY,iBAClBrC,EAAK+B,WAAW,iBAAkBN,IAKtCzB,EAAKoC,kBAAkBX,IACJ,qBAAnBzB,EAAKE,WACc,mBAAnBF,EAAKE,YAELF,EAAKsC,kBAAkBb,KAO/BxB,KAAA6C,cAAgB,SAACrB,GAGbzB,EAAKyC,YAELzC,EAAKY,aAAc,EACnBZ,EAAK+B,WAAW,UAAWN,GAC3BzB,EAAKE,eAAYC,EACjBH,EAAKW,EAAI,GAMbV,KAAA8C,YAAc,SAACtB,GACXzB,EAAK+B,WAAW,QAASN,IAK7BxB,KAAA+C,aAAe,SAACvB,GACZzB,EAAK+B,WAAW,SAAUN,IAzO1BxB,KAAKF,WAAaA,EAClBE,KAAKgD,QAAUhD,KAAKF,WAAWkD,QAC/BhD,KAAKyB,gBAAkBzB,KAAK0B,qBAE5B1B,KAAKiD,qBAAqB,2BAjB9BC,OAAAC,eAAItD,EAAAuD,UAAA,iBAAc,KAAlB,WACI,OAAOpD,KAAKF,WAAWuD,eAAiBrD,KAAKF,WAAWuD,eAAiBrD,KAAKY,iDAGlFsC,OAAAC,eAAItD,EAAAuD,UAAA,iBAAc,KAAlB,WACI,OAAOpD,KAAKF,WAAWwD,eAAiBtD,KAAKF,WAAWwD,eAAiBtD,KAAKgB,iDAGlFkC,OAAAC,eAAItD,EAAAuD,UAAA,iBAAc,KAAlB,WACI,OAAOpD,KAAKF,WAAWyD,eAAiBvD,KAAKF,WAAWyD,eAAiBvD,KAAKqB,iDAWlFxB,EAAAuD,UAAAI,QAAA,WACIxD,KAAKiD,qBAAqB,wBAG9BpD,EAAAuD,UAAAH,qBAAA,SAAqBQ,GACjB,IAAIC,EAYJ,IAAK,IAAIC,KATLD,EAD8B,oBAA9B1D,KAAKF,WAAW4D,UACJR,OAAOU,OAAO5D,KAAKqD,eAAgBrD,KAAKsD,gBAExCtD,KAAK6D,oBAAsB7D,KAAKqD,eAAiBrD,KAAKsD,eAGlEtD,KAAKF,WAAWwB,SAChBoC,EAAYR,OAAOU,OAAOF,EAAW1D,KAAKuD,iBAGzBG,EAAW,CAC5B,IAAMI,EAAwBJ,EAAUC,GAGvB,WAAbA,GACe,qBAAXF,GACAM,OAAOC,iBAAiBL,EAAU3D,KAAK8D,IAAU,GAEtC,wBAAXL,GACAM,OAAOE,oBAAoBN,EAAU3D,KAAK8D,IAAU,IAGpC,YAAbH,GAAuC,cAAbA,GAClB,qBAAXF,GACAS,SAASF,iBAAiBL,EAAU3D,KAAK8D,GAAU,CAACK,SAAS,IAElD,wBAAXV,GACAS,SAASD,oBAAoBN,EAAU3D,KAAK8D,IAAU,KAI3C,qBAAXL,GACAzD,KAAKgD,QAAQgB,iBAAiBL,EAAU3D,KAAK8D,IAAU,GAE5C,wBAAXL,GACAzD,KAAKgD,QAAQiB,oBAAoBN,EAAU3D,KAAK8D,IAAU,MAM1EjE,EAAAuD,UAAAgB,kBAAA,SAAkBT,GACd,IAAMG,EAAwB9D,KAAKgB,gBAAgB2C,GACnDI,OAAOC,iBAAiBL,EAAU3D,KAAK8D,IAAU,IAGrDjE,EAAAuD,UAAAiB,qBAAA,SAAqBV,GACjB,IAAMG,EAAwB9D,KAAKgB,gBAAgB2C,GACnDI,OAAOE,oBAAoBN,EAAU3D,KAAK8D,IAAU,IAyDxDjE,EAAAuD,UAAAf,kBAAA,SAAkBb,GAGdxB,KAAKU,IAEDV,KAAKU,EAAI,IACTV,KAAKC,UAAYD,KAAKsE,mBAAmB9C,IAGtB,qBAAnBxB,KAAKC,WACLD,KAAK8B,WAAW,mBAAoBN,GAGjB,mBAAnBxB,KAAKC,WACLD,KAAK8B,WAAW,iBAAkBN,IAuG1C3B,EAAAuD,UAAAtB,WAAA,SAAWyC,EAAgBC,GACnBxE,KAAKG,SAASoE,IACdvE,KAAKG,SAASoE,GAAWC,IASjC3E,EAAAuD,UAAAnB,UAAA,SAAUD,GACN,OAA0B,IAAnBA,EAAQS,SAAiBzC,KAAKC,WAAgC,QAAnBD,KAAKC,WAG3DJ,EAAAuD,UAAAb,gBAAA,WAAA,IAAAxC,EAAAC,KACI,GAAsBE,MAAlBF,KAAKC,UAAT,CAIA,IAAMwE,GAAc,IAAI9C,MAAOC,UACzB8C,EAAYD,EAAczE,KAAKM,QAIrC,GAFAqE,aAAa3E,KAAK4E,kBAEdF,EAAY1E,KAAKO,qBAAuBmE,EAAY,EACpD,OAAO,EAEP1E,KAAK4E,iBAAmBC,YAAW,WAC/BF,aAAa5E,EAAK6E,oBACnB5E,KAAKO,qBAEZP,KAAKM,QAAUmE,IAKnB5E,EAAAuD,UAAAZ,UAAA,WACI,GAAsBtC,MAAlBF,KAAKC,UAAT,CAIA,IACMyE,GADc,IAAI/C,MAAOC,UACC5B,KAAKS,eAEjCiE,EAAY,IACRA,EAAY1E,KAAKQ,cACjBR,KAAK8B,WAAW,MAAON,OAEvBxB,KAAK8B,WAAW,UAAWN,UAKvC3B,EAAAuD,UAAAlB,YAAA,SAAYV,GAER,OAA2B,IADXA,EAAMQ,QACNS,aAAmCvC,IAAnBF,KAAKC,WAA+C,UAAnBD,KAAKC,WAG1EJ,EAAAuD,UAAAjB,kBAAA,SAAkBX,GACd,IAAMQ,EAAUR,EAAMQ,QAEtB,GAAIA,GACA,GAAuB,IAAnBA,EAAQS,SAAiBzC,KAAKC,WAAgC,qBAAnBD,KAAKC,WAAuD,mBAAnBD,KAAKC,UACzF,OAAOD,KAAKsE,mBAAmB9C,QAGnC,IAAKxB,KAAKC,WAAgC,qBAAnBD,KAAKC,WAAuD,mBAAnBD,KAAKC,UACjE,OAAOD,KAAKsE,mBAAmB9C,IAO3C3B,EAAAuD,UAAAkB,mBAAA,SAAmB9C,GACf,GAAuB,qBAAnBxB,KAAKC,WAAuD,mBAAnBD,KAAKC,UAAgC,CAC9E,IAAM6E,EAAYC,KAAKC,IAAIhF,KAAKiF,SAAS,EAAGzD,GAASxB,KAAKI,QAG1D,OAAiB,EAFC2E,KAAKC,IAAIhF,KAAKkF,QAAQ,EAAG1D,GAASxB,KAAKK,QAEnCyE,EACX,iBAEA,mBAGX,OAAO9E,KAAKC,WAIpBJ,EAAAuD,UAAA1B,mBAAA,WACI,OAAO1B,KAAKgD,QAAQmC,yBAGxBtF,EAAAuD,UAAAvB,sBAAA,SAAsBL,GAClBxB,KAAKI,OAASoB,EAAMQ,QAAQ,GAAGoD,QAAUpF,KAAKyB,gBAAgB4D,KAC9DrF,KAAKK,OAASmB,EAAMQ,QAAQ,GAAGsD,QAAUtF,KAAKyB,gBAAgB8D,KAGlE1F,EAAAuD,UAAAT,qBAAA,SAAqBnB,GACjBxB,KAAKI,OAASoB,EAAM4D,QAAUpF,KAAKyB,gBAAgB4D,KACnDrF,KAAKK,OAASmB,EAAM8D,QAAUtF,KAAKyB,gBAAgB8D,KAGvD1F,EAAAuD,UAAA6B,SAAA,SAASO,EAAYhE,GACjB,IAAMQ,EAAUR,EAAMQ,QAEtB,OAAIA,EACOA,EAAQwD,GAAOJ,QAAUpF,KAAKyB,gBAAgB4D,KAE9C7D,EAAM4D,QAAUpF,KAAKyB,gBAAgB4D,MAIpDxF,EAAAuD,UAAA8B,QAAA,SAAQM,EAAYhE,GAChB,IAAMQ,EAAUR,EAAMQ,QAEtB,OAAIA,EACOA,EAAQwD,GAAOF,QAAUtF,KAAKyB,gBAAgB8D,IAE9C/D,EAAM8D,QAAUtF,KAAKyB,gBAAgB8D,KAIpD1F,EAAAuD,UAAAS,kBAAA,WACI,IAAI4B,EAAW,4BAA4BC,MAAM,KAKjD,MAAK,iBAAkB3B,QAJd,SAAS4B,GACd,OAAO5B,OAAO6B,WAAWD,GAAOE,QAU7BC,CADK,CAAC,IAAKL,EAASM,KAAK,oBAAqB,SAAU,KAAKA,KAAK,MAM7ElG,EAAAuD,UAAA4C,GAAA,SAAGxE,EAAkBsC,GACbtC,IACAxB,KAAKG,SAASqB,GAASsC,MAxanC,GCXAmC,EAAA,WA6FI,SAAAA,EACYnG,EACAoG,EACAC,EACAC,EACAC,GALZ,IAAAtG,EAAAC,KACYA,KAAAF,WAAAA,EACAE,KAAAkG,MAAAA,EACAlG,KAAAmG,MAAAA,EACAnG,KAAAoG,UAAAA,EACApG,KAAAqG,MAAAA,EA9FZrG,KAAAsG,sBAAgC,EAEhCtG,KAAAuG,iBAA2B,EAE3BvG,KAAAwG,YAAsB,EACtBxG,KAAAyG,mBAA6B,EAC7BzG,KAAA0G,WAAgC,OAChC1G,KAAA2G,yBAAmC,EAEnC3G,KAAA4G,mBAAqB,IA2GrB5G,KAAAuB,iBAAmB,SAACC,GAChBzB,EAAKqG,UAAU7E,mBACfxB,EAAKsG,MAAM9E,iBAAiBC,IAGhCxB,KAAA6G,sBAAwB,SAACrF,GACrBzB,EAAKqG,UAAUS,yBAGnB7G,KAAAsC,eAAiB,SAACd,GACVzB,EAAKD,WAAWgH,WAChB/G,EAAKqG,UAAU9D,kBAEfvC,EAAKqG,UAAU9D,gBAAe,GAC9BvC,EAAKsG,MAAM/D,eAAed,KAsBlCxB,KAAA+G,oBAAsB,WAClB,OAAOhH,EAAKsG,MAAMU,uBAGtB/G,KAAAgH,oBAAsB,WAClB,OAAOjH,EAAKsG,MAAMW,uBA7DlBhH,KAAKiH,cArFT/D,OAAAC,eAAI8C,EAAA7C,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKmG,MAAMe,4CAGtBhE,OAAAC,eAAI8C,EAAA7C,UAAA,2BAAwB,KAA5B,WACI,GAAIpD,KAAKmH,OAAQ,CACb,IAAID,EAAalH,KAAKoH,qBAAiD,EAA1BpH,KAAKqH,mBAIlD,OAHIH,EAAalH,KAAKmH,OAAO1E,SACzByE,EAAalH,KAAKmH,OAAO1E,QAEtByE,EAEP,OAAOlH,KAAKkH,4CAIpBhE,OAAAC,eAAI8C,EAAA7C,UAAA,gBAAa,KAAjB,WACI,OAAOpD,KAAKmH,OAAO1E,OAAUzC,KAAKmH,OAAO1E,OAAS,EAAMzC,KAAKmG,MAAMe,WAAa,mCAGpFhE,OAAAC,eAAI8C,EAAA7C,UAAA,qBAAkB,KAAtB,WACI,OAAOpD,KAAKkG,MAAMmB,oDAGtBnE,OAAAC,eAAI8C,EAAA7C,UAAA,YAAS,KAAb,WACI,GAAIpD,KAAKsH,WAAY,CACjB,IAAIC,EAAYvH,KAAKoH,qBAAiD,EAA1BpH,KAAKqH,mBAMjD,OAJIE,EAAYvH,KAAKoH,uBACjBG,EAAYvH,KAAKoH,sBAGdG,EAEP,OAAOvH,KAAKF,WAAWqH,OAAO1E,wCAItCS,OAAAC,eAAI8C,EAAA7C,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKF,WAAW0H,UAAYxH,KAAKF,WAAW2H,sCAGvDvE,OAAAC,eAAI8C,EAAA7C,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKF,WAAWqH,wCAG3BjE,OAAAC,eAAI8C,EAAA7C,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKF,WAAW4H,wCAG3BxE,OAAAC,eAAI8C,EAAA7C,UAAA,mBAAgB,KAApB,WACI,OAAOpD,KAAKF,WAAW6H,kDAG3BzE,OAAAC,eAAI8C,EAAA7C,UAAA,qBAAkB,KAAtB,WACI,OAAOpD,KAAKF,WAAW8H,oDAG3B1E,OAAAC,eAAI8C,EAAA7C,UAAA,2BAAwB,KAA5B,WACI,OAAOpD,KAAKF,WAAW+H,0DAG3B3E,OAAAC,eAAI8C,EAAA7C,UAAA,gBAAa,KAAjB,WACI,OAAOpD,KAAKF,WAAWgI,UAAY9H,KAAK0H,wCAG5CxE,OAAAC,eAAI8C,EAAA7C,UAAA,uBAAoB,KAAxB,WACI,OAAOpD,KAAKkG,MAAMkB,sDAGtBlE,OAAAC,eAAI8C,EAAA7C,UAAA,aAAU,KAAd,WACI,OAAO2B,KAAKgD,MAAM/H,KAAKqG,MAAM2B,QAAUhI,KAAKiI,2DAGhD/E,OAAAC,eAAI8C,EAAA7C,UAAA,eAAY,KAAhB,WACI,OAAOpD,KAAKqG,MAAM2B,yCAatB/B,EAAA7C,UAAA8E,iBAAA,SAAiBpI,GACbE,KAAKF,WAAaA,GAGtBmG,EAAA7C,UAAA6D,KAAA,WACIjH,KAAKmI,aAAenI,KAAKF,WAAWqI,aACpCnI,KAAKoI,aAAepI,KAAKF,WAAWsI,cAAgBpI,KAAKmI,aAAcE,cAAeC,aAG1FrC,EAAA7C,UAAAI,QAAA,WACI+E,cAAcvI,KAAKwI,aAGvBvC,EAAA7C,UAAAqF,YAAA,WACIzI,KAAKmG,MAAMuC,UAqBfzC,EAAA7C,UAAAuF,oBAAA,WACI3I,KAAKqG,MAAMsC,uBAGf1C,EAAA7C,UAAAwF,SAAA,SAASpD,GACL,OAAOxF,KAAKmG,MAAMyC,SAASpD,IAG/BS,EAAA7C,UAAAyF,KAAA,SAAKpG,QAAA,IAAAA,IAAAA,EAAA,GACIzC,KAAK+G,uBACN/G,KAAKqG,MAAMwC,KAAKpG,IAIxBwD,EAAA7C,UAAA0F,KAAA,SAAKrG,QAAA,IAAAA,IAAAA,EAAA,GACDzC,KAAKqG,MAAMyC,KAAKrG,IAWpBwD,EAAA7C,UAAA2F,SAAA,WAAA,IAAAhJ,EAAAC,KACIA,KAAKwI,WAAaQ,aAAY,WAC1BjJ,EAAK8I,SACN7I,KAAKF,WAAWmJ,mBAGvBhD,EAAA7C,UAAA8F,aAAA,WACQlJ,KAAKwI,YACLD,cAAcvI,KAAKwI,eA5K/B,GCAAW,EAAA,WAuFI,SAAAA,EAAoBC,EACRlD,EACAC,GAFQnG,KAAAoJ,mBAAAA,EACRpJ,KAAAkG,MAAAA,EACAlG,KAAAmG,MAAAA,EArFZnG,KAAAqJ,iBAA2B,EAC3BrJ,KAAAsJ,sBAAgC,EAChCtJ,KAAAuJ,iBAA2B,EAC3BvJ,KAAAwJ,wBAAkC,EAClCxJ,KAAAyJ,UAAoB,EACpBzJ,KAAA0J,UAAoB,IACpB1J,KAAA2J,UAAoB,EACpB3J,KAAAI,OAAiB,EACjBJ,KAAA4J,MAAgB,EAChB5J,KAAA6J,mBAA6B,EA8EzB7J,KAAKiH,cA5ET/D,OAAAC,eAAIgG,EAAA/F,UAAA,eAAY,KAAhB,WACI,OAAOpD,KAAKkG,MAAMkC,8CAGtBlF,OAAAC,eAAIgG,EAAA/F,UAAA,qBAAkB,KAAtB,WACI,OAAOpD,KAAKkG,MAAMmB,oDAGtBnE,OAAAC,eAAIgG,EAAA/F,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKoJ,mBAAmBjC,wCAGnCjE,OAAAC,eAAIgG,EAAA/F,UAAA,UAAO,KAAX,WACI,OAAOpD,KAAKoJ,mBAAmBjB,8CAGnCjF,OAAAC,eAAIgG,EAAA/F,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKoJ,mBAAmBtC,4CAGnC5D,OAAAC,eAAIgG,EAAA/F,UAAA,gBAAa,KAAjB,WACI,OAAOpD,KAAKoJ,mBAAmBtB,UAAY9H,KAAKoJ,mBAAmB1B,wCAGvExE,OAAAC,eAAIgG,EAAA/F,UAAA,uBAAoB,KAAxB,WACI,OAAOpD,KAAKkG,MAAMkB,sDAGtBlE,OAAAC,eAAIgG,EAAA/F,UAAA,qBAAkB,KAAtB,WACI,OAAOpD,KAAKoJ,mBAAmBxB,oDAGnC1E,OAAAC,eAAIgG,EAAA/F,UAAA,2BAAwB,KAA5B,WACI,OAAOpD,KAAKoJ,mBAAmBvB,0DAGnC3E,OAAAC,eAAIgG,EAAA/F,UAAA,aAAU,KAAd,WACI,OAAIpD,KAAKmH,OACEnH,KAAKmH,OAAO1E,OAEZzC,KAAKmG,MAAMe,4CAI1BhE,OAAAC,eAAIgG,EAAA/F,UAAA,2BAAwB,KAA5B,WACI,GAAIpD,KAAKmH,OAAQ,CACb,IAAID,EAAalH,KAAKoH,qBAAiD,EAA1BpH,KAAKqH,mBAIlD,OAHIH,EAAalH,KAAKmH,OAAO1E,SACzByE,EAAalH,KAAKmH,OAAO1E,QAEtByE,EAEP,OAAOlH,KAAKkH,4CAIpBhE,OAAAC,eAAIgG,EAAA/F,UAAA,cAAW,KAAf,WACI,OAAOpD,KAAKoH,qBAAuBpH,KAAKkH,4CAG5ChE,OAAAC,eAAIgG,EAAA/F,UAAA,WAAQ,KAAZ,WACI,OAAOpD,KAAK8J,6CAGhB5G,OAAAC,eAAIgG,EAAA/F,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKoJ,mBAAmB1B,wCAGnCxE,OAAAC,eAAIgG,EAAA/F,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKoJ,mBAAmB5B,UAAYxH,KAAKoJ,mBAAmB3B,sCAUvE0B,EAAA/F,UAAA8E,iBAAA,SAAiBkB,GACbpJ,KAAKoJ,mBAAqBA,GAG9BD,EAAA/F,UAAA6D,KAAA,WACIjH,KAAK+J,YAGTZ,EAAA/F,UAAA7B,iBAAA,WACIvB,KAAKI,OAASJ,KAAKkG,MAAM8D,UAAUxI,OACnCxB,KAAK2J,WAAY,IAAIhI,MAAOC,UAC5B5B,KAAKwJ,wBAA0BxJ,KAAKiK,8BAGxCd,EAAA/F,UAAAyD,sBAAA,WACQ7G,KAAKkK,WAIJlK,KAAK6J,oBACN7J,KAAKI,OAASJ,KAAKkG,MAAM8D,UAAUxI,OACnCxB,KAAK2J,WAAY,IAAIhI,MAAOC,UAC5B5B,KAAKwJ,wBAA0BxJ,KAAKiK,8BAGxCjK,KAAK6J,mBAAoB,EACzB7J,KAAK4J,MAAQ5J,KAAKkG,MAAMiE,SAAS3I,OACjCxB,KAAKoK,SAGTjB,EAAA/F,UAAAd,eAAA,SAAe+H,QAAA,IAAAA,IAAAA,GAAA,GACPrK,KAAKkK,WAKLG,EACArK,KAAK6J,mBAAoB,GAI7B7J,KAAK6J,mBAAoB,EACzB7J,KAAKsK,eACLtK,KAAKuK,wBAGTpB,EAAA/F,UAAAgH,KAAA,WACI,IAAII,EAAoBxK,KAAKyK,mBACvBC,EAAW1K,KAAK2K,eAChBC,EAAY5K,KAAK6K,eAEnBH,IACsB,SAAlBA,EAASI,MAAiC,UAAdF,GACV,UAAlBF,EAASI,MAAkC,SAAdF,KAC7BJ,EAAYxK,KAAK+K,eAAeP,IAIxCxK,KAAKgL,mBAAmBR,EAAW,GAE/BxK,KAAK8G,aACL9G,KAAKuJ,iBAAmBiB,GAGxBE,IACsB,SAAlBA,EAASI,MAAmBJ,EAASO,UAAYjL,KAAK0J,YACtD1J,KAAKuJ,iBAAmB,GAEN,UAAlBmB,EAASI,MAAoBJ,EAASO,UAAYjL,KAAK0J,YACvD1J,KAAKuJ,iBAAmBiB,KAKpCrB,EAAA/F,UAAAqH,iBAAA,WACI,IAAMS,EAAWlL,KAAKmL,cACtB,OAAOnL,KAAKwJ,wBAA0B0B,GAG1C/B,EAAA/F,UAAA+H,YAAA,WACI,OAAOnL,KAAKI,OAASJ,KAAK4J,OAI9BT,EAAA/F,UAAAuH,aAAA,WACI,IAAMS,EAAmBpL,KAAKqL,sBAE9B,OAAID,EAAmB,EACZ,CACHN,KAAM,OACNN,UAAWY,EACXH,UAAWlG,KAAKC,IAAIoG,IAIxBA,EAAmBpL,KAAKsL,iBACjB,CACHR,KAAM,QACNN,UAAWY,EACXH,UAAWlG,KAAKC,IAAIoG,EAAmBpL,KAAKsL,wBAJpD,GAWJnC,EAAA/F,UAAA2H,eAAA,SAAeQ,GACX,IAAIL,EAAWnG,KAAKC,IAAIhF,KAAKmL,eACvBK,EAAcxL,KAAKsL,iBACnBZ,EAAW1K,KAAK2K,eAEtB,IAAKD,EACD,OAAO,EAGX,IAAMe,EAAoB,EAAIf,EAASO,UAAY,GAC/CT,EAAmB,EAED,SAAlBE,EAASI,OAEL9K,KAAKwJ,wBAA0B,IAC/B0B,GAAsBnG,KAAKC,IAAIhF,KAAKwJ,0BAIxCgB,EADMkB,EAAkBR,EAAWO,EAG/BzL,KAAKwJ,wBAA0B,IAC/BgB,EAAYxK,KAAKwJ,wBAA0BkC,GAG3ClB,EAAYxK,KAAK0J,YACjBc,EAAYxK,KAAK0J,YAIzB,GAAsB,UAAlBgB,EAASI,KAAkB,CAC3B,IAAMY,EAAkBF,GAAiBxL,KAAKwJ,wBAA0B0B,EAAYM,GAAeC,EAC7FE,EAAiB3L,KAAK4L,WAE5BpB,EAAYkB,EAER1L,KAAKwJ,0BAA4BmC,EAAiB3L,KAAKoI,gBACvDoC,EAAcmB,EAAiB3L,KAAKoI,aAAgBpI,KAAKwJ,wBAA2BkC,GAGpFlB,EAAYgB,EAAcxL,KAAK0J,YAC/Bc,EAAYgB,EAAcxL,KAAK0J,WAIvC,OAAOc,GAGXrB,EAAA/F,UAAAkH,aAAA,WACI,IAAME,EAAYxK,KAAKyK,mBACnBoB,EAAsB,EAEtB7L,KAAK8G,aACL+E,EAAe7L,KAAK8L,cAIxBD,EAAe7L,KAAK+L,yBAAyBF,GAE7C7L,KAAKgL,mBAAmBa,GACxB7L,KAAKgM,mBAAmBxB,IAI5BrB,EAAA/F,UAAA0I,WAAA,WACI,IAGIG,EAHajM,KAAKmL,gBACF,IAAIxJ,MAAOC,UACC5B,KAAK2J,WACE,IAEvC,OAAO3J,KAAKuJ,iBAAmB0C,GAGnC9C,EAAA/F,UAAA2I,yBAAA,SAAyBF,GACrB,IAAMjB,EAAY5K,KAAK6K,eAEvB,GAAkB,SAAdD,EAAsB,CACtB,IAAIY,EAAcxL,KAAKsL,iBACvB,GAAIO,EAAeL,EACf,OAAOA,EAGf,MAAkB,UAAdZ,GACIiB,EAAe,EACR,EAIRA,GAGX1C,EAAA/F,UAAAiI,oBAAA,WACI,IAAMa,EAAiBlM,KAAKgD,QAASqF,cAAelD,wBAEpD,OADiBnF,KAAKgD,QAAQmC,wBACdE,KAAO6G,EAAe7G,MAG1C8D,EAAA/F,UAAAkI,eAAA,WACI,GAAItL,KAAKsH,WAEL,QADwBtH,KAAKmG,MAAMgG,WAAWC,YACnB3J,OAASzC,KAAKqM,cAAgBrM,KAAKoI,aAAepI,KAAK0H,QAElF,IAAM4E,EAAQtM,KAAK4L,WAEnB,OADqB5L,KAAKgD,QAASqF,cAAeC,YAC5BgE,GAI9BnD,EAAA/F,UAAA4H,mBAAA,SAAmBuB,EAAcC,QAAA,IAAAA,IAAAA,EAAWxM,KAAK4H,yBAC/B1H,IAAVqM,IAIJvM,KAAKgD,QAAQyJ,MAAMC,WAAa,aAAeF,EAAW,MAAQxM,KAAK6H,yBACvE7H,KAAKgD,QAAQyJ,MAAME,UAAY,cAAgBJ,EAAQ,QAG3DpD,EAAA/F,UAAAwI,SAAA,WACI,IAAIU,EAAQtM,KAAKiI,yBAA2BjI,KAAKqM,cAC7CO,EAAkB5M,KAAKkH,WAAalH,KAAKqM,cAM7C,OAJIO,EAAkBN,IAClBA,EAAQM,GAGL5M,KAAKsH,WAAagF,EAAQM,GAGrCzD,EAAA/F,UAAA2G,SAAA,WACI,IAAMuC,EAAQtM,KAAK4L,WACnB5L,KAAKgD,QAAQyJ,MAAMH,MAAQA,EAAQ,MAGvCnD,EAAA/F,UAAA4I,mBAAA,SAAmBa,GACf7M,KAAKuJ,iBAAmBsD,GAG5B1D,EAAA/F,UAAA1B,mBAAA,WACI,OAAO1B,KAAKgD,QAAQmC,yBAGxBgE,EAAA/F,UAAA6G,2BAAA,WACI,IAAM6C,EAA0B9M,KAAKkG,MAAM6G,6BAAmC,KAC9E,OAAO/M,KAAK0B,qBAA2B,KAAIoL,GAG/C3D,EAAA/F,UAAAmH,mBAAA,WACIvK,KAAKI,OAASJ,KAAK4J,MAAQ,GAG/BT,EAAA/F,UAAAyH,aAAA,WACI,IAAMD,EAAY7F,KAAKiI,KAAKhN,KAAKI,OAASJ,KAAK4J,OAE/C,OAAmB,IAAfgB,EACO,QAEO,IAAdA,EACO,YADX,KApWR,GCSAqC,EAAA,WAII,SAAAA,EAAYjK,GAHZhD,KAAAkN,UAAoB,GAIhBlN,KAAKgD,QAAUA,SAGnBiK,EAAA7J,UAAAgJ,UAAA,WACI,OAAOpM,KAAKkN,UAAUC,OAAOnN,KAAKmN,SAGtCF,EAAA7J,UAAA+J,OAAA,SAAOC,GACH,YAAoBlN,IAAbkN,EAAKC,OAbpB,GAiBAC,EAAA,WA4CI,SAAAA,EACYlE,EACAlD,GADAlG,KAAAoJ,mBAAAA,EACApJ,KAAAkG,MAAAA,EA1CZlG,KAAAgI,QAAkB,EA4CdhI,KAAKmM,WAAa,IAAIc,EAAWjN,KAAKgD,SACtChD,KAAKiH,KAAKmC,UA1CdlG,OAAAC,eAAImK,EAAAlK,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKoJ,mBAAmBjC,wCAGnCjE,OAAAC,eAAImK,EAAAlK,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKmG,MAAQnG,KAAKmG,MAAM1D,OAAS,mCAG5CS,OAAAC,eAAImK,EAAAlK,UAAA,gBAAa,KAAjB,WACI,OAAOpD,KAAKoJ,mBAAmBtB,UAAY9H,KAAKoJ,mBAAmB1B,wCAGvExE,OAAAC,eAAImK,EAAAlK,UAAA,2BAAwB,KAA5B,WACI,GAAIpD,KAAKmH,OAAQ,CACb,IAAID,EAAalH,KAAKoH,qBAAiD,EAA1BpH,KAAKqH,mBAKlD,OAHIH,EAAalH,KAAKmH,OAAO1E,SACzByE,EAAalH,KAAKmH,OAAO1E,QAEtByE,EAEP,OAAOlH,KAAKkH,4CAIpBhE,OAAAC,eAAImK,EAAAlK,UAAA,uBAAoB,KAAxB,WACI,OAAOpD,KAAKkG,MAAMkB,sDAGtBlE,OAAAC,eAAImK,EAAAlK,UAAA,qBAAkB,KAAtB,WACI,OAAOpD,KAAKkG,MAAMmB,oDAGtBnE,OAAAC,eAAImK,EAAAlK,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKoJ,mBAAmB5B,UAAYxH,KAAKoJ,mBAAmB3B,sCAWvE6F,EAAAlK,UAAA8E,iBAAA,SAAiBkB,GACbpJ,KAAKoJ,mBAAqBA,GAG9BkE,EAAAlK,UAAAsF,OAAA,WACI,IAAMvC,EAAQnG,KAAKgD,QAAUhD,KAAKgD,QAAQuK,SAAW,GACrDvN,KAAKmM,WAAWe,UAAY,GAE5B,IAAK,IAAIxM,EAAI,EAAGA,EAAIyF,EAAM1D,OAAQ/B,IAAK,CACnC,IAAI0M,EAAOjH,EAAMzF,GACb8J,EAAYxK,KAAKwN,2BAA2B9M,GAC/C0M,EAAqBX,MAAME,UAAY,cAAgBnC,EAAY,MACnE4C,EAAqBX,MAAMH,MAAQtM,KAAKoJ,mBAAmBtB,UAAY,KAEpE9H,KAAK4I,SAASlI,IACdV,KAAKmM,WAAWe,UAAUO,KAAK,CAC3BjI,MAAO9E,EACP8J,UAASA,EACT6C,IAAKrN,KAAK4I,SAASlI,GAAW,UAM9C4M,EAAAlK,UAAAsK,2BAAA,WAEI,MAAuC,oBADrB1N,KAAKgD,QAAQuK,SAClB,GAAU,MAAEZ,WAG7BW,EAAAlK,UAAAoK,2BAAA,SAA2BG,GAEvB,OADoB3N,KAAK4N,wBAAwBD,GAC1B3N,KAAKqM,eAGhCiB,EAAAlK,UAAAwK,wBAAA,SAAwBD,GACpB,IAAIE,EAEJ,IAAK7N,KAAKsH,WACN,OAAOqG,EAGX,IAAIzG,EAAalH,KAAKiI,yBAClBD,EAAUhI,KAAKgI,QAAUhI,KAAKqH,mBAMlC,OAJIW,EAAUd,IACVc,GAAoBd,GAGpBc,EAAU,EACH2F,IAEPE,EAAgBF,EAAqB3F,GACjB,IAChB6F,EAAgB3G,EAAa2G,GAI9BA,IAGXP,EAAAlK,UAAAwF,SAAA,SAASkF,GACL,GAAK9N,KAAKmH,OAAV,CAIA,IAAI4G,EAAa/N,KAAKgO,cAAcF,GAChCG,EAAOjO,KAAKmH,OAAO4G,GAMvB,OAJIE,IAASA,EAAKC,OACdD,EAAKC,KAAO,SAGT,CACHC,MAAOnO,KAAKmH,OAAO4G,GACnBA,WAAUA,KAIlBT,EAAAlK,UAAA4K,cAAA,SAAcL,GACV,IACII,EADEF,EAAgB7N,KAAK4N,wBAAwBD,GAG/C3N,KAAKgI,QAAUhI,KAAKqH,oBAEpB0G,EAAaF,GADW7N,KAAKgI,QAAUhI,KAAKqH,oBAGxCrH,KAAKmH,QAAUnH,KAAKoJ,mBAAmB3B,OACvCsG,GAA0B/N,KAAKmH,OAAO1E,SAG1CsL,EAAaJ,EAGjB,OAAOI,GAGXT,EAAAlK,UAAAgL,WAAA,SAAW7B,GACPvM,KAAKgI,QAAUuE,GAGnBe,EAAAlK,UAAA6D,KAAA,SAAKmC,GACDpJ,KAAKgD,QAAUhD,KAAKoJ,mBAAmBjB,aACvCnI,KAAKmG,MAAQnG,KAAKgD,QAAQuK,SAC1BvN,KAAKoI,aAAepI,KAAKoJ,mBAAmBhB,cAAgBpI,KAAKgD,QAASqF,cAAeC,eA3JjG,GCtBA+F,EAAA,WAoEI,SAAAA,EAAoBjF,EACRlD,EACAC,EACAC,GAHQpG,KAAAoJ,mBAAAA,EACRpJ,KAAAkG,MAAAA,EACAlG,KAAAmG,MAAAA,EACAnG,KAAAoG,UAAAA,EAtEZpG,KAAAsO,YAAsB,EACtBtO,KAAAuO,mBAA6B,EAE7BvO,KAAAgI,QAAkB,EAClBhI,KAAAwO,SAAmB,EACnBxO,KAAAkL,SAAmB,EACnBlL,KAAAyO,YAAsB,EAEtBzO,KAAA0O,mBAA6B,EAC7B1O,KAAAuJ,iBAA2B,EAC3BvJ,KAAAoL,iBAA2B,EAG3BpL,KAAAsG,sBAAgC,EA2D5BtG,KAAKiH,cAzDT/D,OAAAC,eAAIkL,EAAAjL,UAAA,gBAAa,KAAjB,WACI,OAAOpD,KAAKoJ,mBAAmBtB,UAAY9H,KAAKoJ,mBAAmB1B,wCAGvExE,OAAAC,eAAIkL,EAAAjL,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKoJ,mBAAmB1B,wCAGnCxE,OAAAC,eAAIkL,EAAAjL,UAAA,mBAAgB,KAApB,WACI,OAAOpD,KAAKoJ,mBAAmBzB,kDAGnCzE,OAAAC,eAAIkL,EAAAjL,UAAA,uBAAoB,KAAxB,WACI,OAAOpD,KAAKkG,MAAMkB,sDAGtBlE,OAAAC,eAAIkL,EAAAjL,UAAA,gCAA6B,KAAjC,WACI,OAAOpD,KAAKkG,MAAMyI,+DAMtBzL,OAAAC,eAAIkL,EAAAjL,UAAA,yBAAsB,KAA1B,WACI,OAASpD,KAAKqH,mBAAqBrH,KAAKqM,+CAG5CnJ,OAAAC,eAAIkL,EAAAjL,UAAA,qBAAkB,KAAtB,WACI,OAAOpD,KAAKkG,MAAMmB,oDAGtBnE,OAAAC,eAAIkL,EAAAjL,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKoJ,mBAAmBjC,wCAInCjE,OAAAC,eAAIkL,EAAAjL,UAAA,aAAU,KAAd,WACI,OAAIpD,KAAKsH,WACEtH,KAAKmG,MAAM8B,yBAEdjI,KAAKmH,OACEnH,KAAKmH,OAAO1E,OAEZzC,KAAKmG,MAAMe,4CAK9BhE,OAAAC,eAAIkL,EAAAjL,UAAA,aAAU,KAAd,WACI,OAAOpD,KAAKoJ,mBAAmB5B,UAAYxH,KAAKoJ,mBAAmB3B,sCAWvE4G,EAAAjL,UAAA8E,iBAAA,SAAiBkB,GACbpJ,KAAKoJ,mBAAqBA,EAC1BpJ,KAAK4O,mBAGTP,EAAAjL,UAAA6D,KAAA,WACIjH,KAAKoI,aAAepI,KAAKoJ,mBAAmBhB,cAAgBpI,KAAKoJ,mBAAmByF,YAAYvG,aAGpG+F,EAAAjL,UAAA7B,iBAAA,WAEIvB,KAAK0O,mBAAoB,EACzB1O,KAAKsG,sBAAuB,EAEvBtG,KAAKuO,oBACNvO,KAAKuJ,iBAAmBvJ,KAAKoG,UAAUiF,wBAI/CgD,EAAAjL,UAAAd,eAAA,WACStC,KAAK0O,oBAGV1O,KAAKoL,iBAAmBpL,KAAKoG,UAAUiF,sBACvCrL,KAAKyO,YAAc1J,KAAKC,IAAIhF,KAAKuJ,iBAAmBvJ,KAAKoL,kBACzDpL,KAAKkL,SAAWlL,KAAKuJ,iBAAmBvJ,KAAKoL,iBAC7CpL,KAAK4K,UAAY5K,KAAK6K,eACtB7K,KAAK0O,mBAAoB,EACzB1O,KAAK8O,gBAGTT,EAAAjL,UAAAuF,oBAAA,WACI3I,KAAKoO,aACLpO,KAAKuO,mBAAoB,EAErBvO,KAAKsH,YACLtH,KAAK+O,sBAIbV,EAAAjL,UAAA0L,YAAA,SAAYE,GACR,IACInD,EAEJ,QAJQ,IAAAmD,IAAAA,OAAA9O,KACY8O,GAGChP,KAAKuO,oBAAsBvO,KAAK4K,WAArD,CAkBA,GAbIoE,GACAhP,KAAKsO,YAActO,KAAKiP,iBAAiBD,GAEpChP,KAAKuO,oBACNvO,KAAKuJ,iBAAmBvJ,KAAKoG,UAAUiF,wBAG3CrL,KAAKsO,YAActO,KAAKkP,eAAelP,KAAKyO,aAIhDzO,KAAKwO,SAAWxO,KAAKmP,wBAEE,SAAnBnP,KAAK4K,UAAsB,CACtBoE,IACDhP,KAAKsO,YAActO,KAAKiP,iBAAiBjP,KAAKkP,eAAelP,KAAKyO,eAGtEzO,KAAKwO,SAAWxO,KAAKmP,wBACrB,IAAIC,EAAcpP,KAAKoP,YAAYpP,KAAKwO,UACxC3C,EAAe7L,KAAKqP,mBAAmBrP,KAAKwO,UAExCY,IACApP,KAAKwO,SAAWxO,KAAKgI,QAErB6D,EAAe7L,KAAKqP,mBAAmBrP,KAAKgI,SAC5ChI,KAAKsO,YAAc,GAIJ,UAAnBtO,KAAK4K,YACAoE,IACDhP,KAAKsO,YAActO,KAAKkP,eAAelP,KAAKyO,cAG5CzO,KAAKwO,SAAW,IAChBxO,KAAKwO,SAAWxO,KAAKgI,QACrBhI,KAAKsO,YAActO,KAAKgI,SAG5B6D,EAAe7L,KAAKqP,mBAAmBrP,KAAKgI,QAAUhI,KAAKsO,cAG3DtO,KAAKoG,UAAUiF,wBAA0BQ,IACzC7L,KAAKuO,mBAAoB,EACzBvO,KAAKoG,UAAU4E,mBAAmBa,MAI1CwC,EAAAjL,UAAAyF,KAAA,SAAKpG,QAAA,IAAAA,IAAAA,EAAA,GACDzC,KAAK4K,UAAY,OACjB5K,KAAK8O,YAAYrM,IAGrB4L,EAAAjL,UAAA0F,KAAA,SAAKrG,QAAA,IAAAA,IAAAA,EAAA,GACDzC,KAAK4K,UAAY,QACjB5K,KAAK8O,YAAYrM,IAGrB4L,EAAAjL,UAAAkM,OAAA,SAAO9J,GACH,KAAIA,EAAQxF,KAAKkH,WAAa,GAA9B,CAIA,GAAI1B,EAAQxF,KAAKgI,QAAS,CACtB,IAAIvF,EAAS+C,EAAQxF,KAAKgI,QAC1BhI,KAAK6I,KAAKpG,GAGd,GAAI+C,EAAQxF,KAAKgI,QAAS,CAClBvF,EAASzC,KAAKgI,QAAUxC,EAC5BxF,KAAK8I,KAAKrG,MAIlB4L,EAAAjL,UAAA+L,sBAAA,WACI,MAAuB,SAAnBnP,KAAK4K,UACE5K,KAAKgI,QAAUhI,KAAKsO,YAGR,UAAnBtO,KAAK4K,UACE5K,KAAKgI,QAAUhI,KAAKsO,YAGxB,GAOXD,EAAAjL,UAAA6L,iBAAA,SAAiBX,GACb,GAAIA,EAAc,EACd,IAAK,IAAI5N,EAAI,EAAGA,EAAI4N,EAAa5N,IAAK,CAClC,IAAI6O,EAAavP,KAAKgI,SAAWsG,EAAc5N,GAE/C,IAAKV,KAAKoP,YAAYG,GAAa,CAC/BjB,GAA4B5N,EAC5BV,KAAKsG,qBAAuB5F,EAAI,EAChC,OAIZ,OAAO4N,GAIXD,EAAAjL,UAAAoM,sBAAA,SAAsBxH,GAClB,IAAIyH,EAAa,EACbC,EAAc1P,KAAK0P,YAAY1H,GAEnC,GAAIhI,KAAKoJ,mBAAmB3B,MAA2B,UAAnBzH,KAAK4K,UACrC,OAAO,EAGX,GAAI5K,KAAKsG,sBAAwBoJ,EAAa,CAC1C,IAAIC,EAAa3P,KAAKmG,MAAM8B,yBAA2BjI,KAAKqM,cAExDrM,KAAKoI,aAAeuH,IACpBF,IAAezP,KAAKoH,qBAAuBpH,KAAKqM,cAAgBrM,KAAKoI,aAAepI,KAAK0H,SAGzF+H,IAAezP,KAAK0H,SACpB+H,EAAa,GAIrB,OAAOA,GAGXpB,EAAAjL,UAAA8L,eAAA,SAAeT,GACOzO,KAAK0P,YAAY1P,KAAKgI,UAMF,UAAnBhI,KAAK4K,YACpB6D,GAA4BzO,KAAKoI,aAAepI,KAAKqM,eAGzD,IAAI5J,EAASsC,KAAKgD,MAAM0G,EAAczO,KAAKqM,eAM3C,OAJIoC,EAAczO,KAAKqM,eAAiBrM,KAAK2H,kBACzClF,IAGGA,GAGX4L,EAAAjL,UAAAwM,eAAA,WACI,OAAO7K,KAAKC,IAAIhF,KAAKuJ,iBAAmBvJ,KAAKoL,mBAGjDiD,EAAAjL,UAAAyH,aAAA,WACI,IAAMD,EAAY7F,KAAKiI,KAAKhN,KAAKuJ,iBAAmBvJ,KAAKoL,kBAEzD,OAAmB,IAAfR,EACO,QAEO,IAAdA,EACO,YADX,GAOJyD,EAAAjL,UAAAgM,YAAA,SAAYpH,GACR,IAAIN,EAAS1H,KAAK2O,8BAAgC,EAAI,EAClDkB,EAAc7P,KAAKmH,OAASnH,KAAKmH,OAAO1E,OAASzC,KAAKmG,MAAMe,WAEhE,OAAIlH,KAAKoJ,mBAAmB3B,MAGhBoI,EAAc7H,EAAUN,EAAU1H,KAAKoH,sBAIvDiH,EAAAjL,UAAAsM,YAAA,SAAY1H,GACR,OAAOhI,KAAKoP,YAAYpH,EAAU,IAGtCqG,EAAAjL,UAAAgL,WAAA,WAC2B,SAAnBpO,KAAK4K,YACL5K,KAAKgI,QAAUhI,KAAKgI,QAAUhI,KAAKsO,aAGhB,UAAnBtO,KAAK4K,YACL5K,KAAKgI,QAAUhI,KAAKgI,QAAUhI,KAAKsO,cAI3CD,EAAAjL,UAAAiM,mBAAA,SAAmBb,GACf,IACI3B,EADA4C,EAAazP,KAAKwP,sBAAsBxP,KAAKgI,QAAUhI,KAAKsO,cAG7C,IAAfmB,IACAA,GAA0BzP,KAAKqM,eAGZ,UAAnBrM,KAAK4K,YACL6E,EAAa,GAGbzP,KAAKsH,YAActH,KAAK8P,eAAetB,IACvCxO,KAAKsH,YAActH,KAAK+P,mBAAmBvB,IAI3C3B,EAFsB7M,KAAKgQ,6BAA6BhQ,KAAKuJ,oBACrCiF,EAAWxO,KAAKgI,SACWhI,KAAKqM,cAAiBoD,GAEzE5C,IAAc2B,EAAWxO,KAAKqM,cAAiBoD,GAKnD,OAFA5C,EAAW7M,KAAKiQ,oBAAoBpD,IAKxCwB,EAAAjL,UAAA6M,oBAAA,SAAoBpD,GAChB,IAAMrB,EAAcxL,KAAKoG,UAAUkF,iBAcnC,MAZuB,SAAnBtL,KAAK4K,WACDiC,EAAW,IACXA,EAAW,GAII,UAAnB7M,KAAK4K,WACDiC,EAAWrB,IACXqB,EAAWrB,GAIZqB,GAGXwB,EAAAjL,UAAA4M,6BAAA,SAA6BzD,GACzB,IAAI2D,EAAYnL,KAAKoL,MAAM5D,GAASvM,KAAKqM,cAEzC,OAAkB,IAAd6D,EACO3D,GAASvM,KAAKqM,cAAgB6D,GAE9B3D,GAIf8B,EAAAjL,UAAA2D,oBAAA,WACI,OAAO/G,KAAK0P,YAAY1P,KAAKgI,WAC3BhI,KAAK2O,+BAAiC3O,KAAKkH,YAAclH,KAAKoH,sBAC/DpH,KAAK2O,+BAAiC3O,KAAKkH,WAAalH,KAAKoH,sBAGlEiH,EAAAjL,UAAA4D,oBAAA,WACI,OAAwB,IAAjBhH,KAAKgI,SAGhBqG,EAAAjL,UAAA2L,mBAAA,WACI,GAAI/O,KAAK8P,eAAe9P,KAAKgI,SAAU,CACnC,IAAIwC,EAAYxK,KAAKoQ,uBACrBpQ,KAAKoG,UAAU4E,mBAAmBR,EAAW,GAE7CxK,KAAKmG,MAAMiI,WAAWpO,KAAKgI,SAC3BhI,KAAKmG,MAAMuC,cACR,GAAI1I,KAAKqQ,yBAAyBrQ,KAAKgI,UAI1C,GAAIhI,KAAKmG,MAAMuH,6BAA8B,CACrClD,GAAcxK,KAAKgI,QAAUhI,KAAKqM,cACtCrM,KAAKoG,UAAU4E,mBAAmBR,EAAW,GAE7CxK,KAAKmG,MAAMiI,WAAWpO,KAAKgI,SAC3BhI,KAAKmG,MAAMuC,eAEZ,GAAI1I,KAAK+P,mBAAmB/P,KAAKgI,SAAU,CAC9C,IAAIsI,EAAqBtQ,KAAKoG,UAAUiF,sBACpCM,EAAiB3L,KAAKoG,UAAUwF,WAGpC,GAFA5L,KAAKoI,aAEDpI,KAAK0P,YAAY1P,KAAKgI,UACtB2D,EAAiB2E,GAAsBtQ,KAAKoI,aAC5C,OAGJ,IAAIqH,EAAazP,KAAKwP,sBAAsBxP,KAAKgI,SAE9B,IAAfyH,IACAA,GAA0BzP,KAAKqM,eAGZ,UAAnBrM,KAAK4K,YACL6E,EAAa,GAGbjF,EAAYxK,KAAKoQ,uBAAyBX,EAE9CzP,KAAKoG,UAAU4E,mBAAmBR,EAAW,GAC7CxK,KAAKmG,MAAMiI,WAAWpO,KAAKgI,SAC3BhI,KAAKmG,MAAMuC,WAInB2F,EAAAjL,UAAA0M,eAAA,SAAe9H,GACX,IAAIuI,EACAC,EAAmBxQ,KAAKmH,OAAO1E,OAASzC,KAAKqH,mBAAqBrH,KAAKoH,qBAE3E,QAAKpH,KAAKsH,aAINU,EAAUhI,KAAKqH,oBAAyC,SAAnBrH,KAAK4K,WAC1C5C,GAAWwI,IACXD,GAAO,GAGPvI,GAAWhI,KAAKqH,oBAAyC,UAAnBrH,KAAK4K,WAC3C5C,EAAUwI,IACVD,GAAO,GAGPvQ,KAAKgI,QAAUhI,KAAKqH,oBAAyC,SAAnBrH,KAAK4K,WAC/C5K,KAAKgI,SAAWwI,IAChBD,GAAO,GAGPvQ,KAAKgI,SAAWhI,KAAKqH,oBAAyC,UAAnBrH,KAAK4K,WAChD5K,KAAKgI,QAAUwI,IACfD,GAAO,GAGJA,IAGXlC,EAAAjL,UAAA2M,mBAAA,SAAmB/H,GACf,IAAIuI,EACAC,EAAmBxQ,KAAKmH,OAAO1E,OAASzC,KAAKqH,mBAAqBrH,KAAKoH,qBAU3E,OARIY,GAAWwI,IACXD,GAAO,GAGPvQ,KAAKgI,SAAWwI,IAChBD,GAAO,GAGJA,GAGXlC,EAAAjL,UAAAiN,yBAAA,SAAyBrI,GACrB,IAAIuI,EAUJ,OARIvI,GAAWhI,KAAKqH,qBAChBkJ,GAAO,GAGPvQ,KAAKgI,SAAWhI,KAAKqH,qBACrBkJ,GAAO,GAGJA,GAGXlC,EAAAjL,UAAAwL,gBAAA,WACI5O,KAAKoI,aAAepI,KAAKoJ,mBAAmBhB,cAAgBpI,KAAKoJ,mBAAmByF,YAAYvG,eAzexG,GCJAmI,EAAA,WA4CI,SAAAA,EAAoBrH,GAAApJ,KAAAoJ,mBAAAA,SA1CpBlG,OAAAC,eAAIsN,EAAArN,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKoJ,mBAAmBjC,wCAGnCjE,OAAAC,eAAIsN,EAAArN,UAAA,SAAM,KAAV,WACI,OAAOpD,KAAKoJ,mBAAmB1B,wCAGnCxE,OAAAC,eAAIsN,EAAArN,UAAA,qBAAkB,KAAtB,WACI,GAAIpD,KAAKmH,QAAUnH,KAAK0Q,sBAAuB,CAC3C,IAAIrJ,EAAqBtC,KAAKgD,OAAO/H,KAAKmH,OAAO1E,OAASzC,KAAKoH,sBAAwB,GAMvF,OAJIC,EAAqB,IACrBA,EAAqB,GAGlBA,EAEP,OAAOrH,KAAKoJ,mBAAmB/B,oDAIvCnE,OAAAC,eAAIsN,EAAArN,UAAA,wBAAqB,KAAzB,WACI,OAAoD,EAA7CpD,KAAKoJ,mBAAmB/B,mBAAyBrH,KAAKoH,qBAAuBpH,KAAKmH,OAAO1E,wCAGpGS,OAAAC,eAAIsN,EAAArN,UAAA,uBAAoB,KAAxB,WACI,OAAO2B,KAAK4L,KAAK3Q,KAAKoI,aAAepI,KAAKqM,gDAG9CnJ,OAAAC,eAAIsN,EAAArN,UAAA,gCAA6B,KAAjC,WACI,OAAQpD,KAAKoH,qBAAuBpH,KAAKqM,cAAgBrM,KAAK0H,OAAU1H,KAAKoI,8CAGjFlF,OAAAC,eAAIsN,EAAArN,UAAA,gBAAa,KAAjB,WACI,OAAOpD,KAAKoJ,mBAAmBtB,UAAY9H,KAAKoJ,mBAAmB1B,wCAGvExE,OAAAC,eAAIsN,EAAArN,UAAA,eAAY,KAAhB,WACI,OAAOpD,KAAKoJ,mBAAmBhB,cAAgBpI,KAAKoJ,mBAAoBjB,aAAcE,cAAeC,6CAOzGmI,EAAArN,UAAA8E,iBAAA,SAAiBkB,GACbpJ,KAAKoJ,mBAAqBA,GAG9BqH,EAAArN,UAAA4G,UAAA,SAAUxI,GACN,IAAMQ,EAAUR,EAAMQ,QAChB8K,EAA0B9M,KAAK+M,6BAAmC,KASxE,OANI/K,EACSA,EAAQ,GAAGoD,QAAU0H,EAErBtL,EAAM4D,QAAU0H,GAMjC2D,EAAArN,UAAA+G,SAAA,SAAS3I,GACL,IAAMQ,EAAUR,EAAMQ,QAChB4O,EAA2B5Q,KAAK+M,6BAAmC,KAEzE,OAAI/K,EACOA,EAAQ,GAAGoD,QAAUwL,EAErBpP,EAAM4D,QAAUwL,GAI/BH,EAAArN,UAAA2J,2BAAA,WACI,OAAO/M,KAAKoJ,mBAAmByF,YAAY1J,2BA9EnD,gBC8MI,SAAA0L,EACYC,EACAC,GAFZ,IAAAhR,EAAAC,KACYA,KAAA8Q,WAAAA,EACA9Q,KAAA+Q,IAAAA,EAtLZ/Q,KAAAgR,WAAa,GACbhR,KAAAiR,gBAA0B,EAC1BjR,KAAAkR,YAAsB,EAEtBlR,KAAAmR,WAA8B,IAC9BnR,KAAAoR,OAAiB,EACjBpR,KAAAqR,WAAqB,EACrBrR,KAAAsR,UAAoB,EACpBtR,KAAAuR,aAAuB,EAyEbvR,KAAAwR,OAA+B,IAAIC,EAAAA,aAGpCzR,KAAA0R,OAAiB,IAEjB1R,KAAA+I,UAAoB,EACpB/I,KAAAiJ,iBAA2B,IAC3BjJ,KAAA2R,cAAwB,EACxB3R,KAAA4R,MAAgB,EAEhB5R,KAAA0H,OAAiB,GACjB1H,KAAA6R,UAA0C,QAC1C7R,KAAA2H,iBAA2B,GAC3B3H,KAAA4H,mBAA6B,IAC7B5H,KAAA6H,yBAAuF,WAEvF7H,KAAA8R,iBAA2B,MAC3B9R,KAAAqH,mBAA6B,EAC7BrH,KAAA0D,UAAwC,kBAExC1D,KAAA+R,cAAwB,EACxB/R,KAAA8G,YAAsB,EACtB9G,KAAAgS,QAAkB,EAClBhS,KAAAiS,eAAyB,EACzBjS,KAAAkS,YAAgC,QAkDVlS,KAAAmS,mBAA6B,EA0J5DnS,KAAAuB,iBAAmB,SAACC,GAChBzB,EAAKiC,QAAQoC,kBAAkB,YAAa,mBAC5CrE,EAAKqS,SAAS7Q,iBAAiBC,GAC/BzB,EAAKuR,UAAW,GAGpBtR,KAAA6G,sBAAwB,SAACrF,GACrBA,EAAM6Q,iBACNtS,EAAKqS,SAASvL,sBAAsBrF,IAGxCxB,KAAAsC,eAAiB,SAACd,GACEA,EAAMQ,QACtBjC,EAAKqS,SAAS9P,eAAed,GAC7BzB,EAAKiC,QAAQqC,qBAAqB,YAAa,mBAC/CtE,EAAKuR,UAAW,GAGpBtR,KAAAsS,UAAY,SAAC9Q,GACT,IAGI+Q,EAAQC,MAAMpP,UAAUqP,MAAMC,KAAK3S,EAAKoI,aAAaoF,UACrDoF,EAAcnR,EAAMoR,WAAWC,QAAQ,kBACjCN,EAAMO,QAAQH,GACNJ,EAAMO,QAAQH,GAE5B5S,EAAKoH,eAlUbjE,OAAAC,eAAI0N,EAAAzN,UAAA,oBAAiB,KAArB,WACI,GAAIpD,KAAKoS,SACL,OAAOpS,KAAKoS,SAAS3L,mDAI7BvD,OAAAC,eAAI0N,EAAAzN,UAAA,eAAY,KAAhB,WACI,GAAIpD,KAAKoS,SACL,OAAOpS,KAAKoS,SAASW,8CAI7B7P,OAAAC,eAAI0N,EAAAzN,UAAA,aAAU,KAAd,WACI,GAAIpD,KAAKoS,SACL,OAAOpS,KAAKoS,SAASY,4CAI7B9P,OAAAC,eAAI0N,EAAAzN,UAAA,cAAW,KAAf,WACI,OAAOW,OAAOkP,WAAalP,OAAOmP,6CAGtChQ,OAAAC,eAAI0N,EAAAzN,UAAA,WAAQ,KAAZ,WACI,IAAM+P,EAAKC,UAAUC,UAAUC,cAC/B,IAA8B,IAA1BH,EAAGL,QAAQ,UACX,QAASK,EAAGL,QAAQ,WAAa,oCAIzC5P,OAAAC,eAAI0N,EAAAzN,UAAA,UAAO,KAAX,WASI,OANIpD,KAAKyH,KACKzH,KAAK+S,aAAe/S,KAAKkH,WAEzBlH,KAAK+S,cAGF,EAAI/S,KAAK8R,iBAAmB9R,KAAKkH,4CAGtDhE,OAAAC,eAAI0N,EAAAzN,UAAA,eAAY,KAAhB,WACI,OAAOpD,KAAK8Q,WAAWyC,cAAcC,cAAc,oDAGvDtQ,OAAAC,eAAI0N,EAAAzN,UAAA,WAAQ,KAAZ,WACI,OAAOpD,KAAKgS,SAAWhS,KAAK8G,4CAGhC5D,OAAAC,eAAI0N,EAAAzN,UAAA,YAAS,KAAb,WACI,OAAOpD,KAAKkR,YAAclR,KAAKkH,WAAa,OAyDhD,SAAgCqF,GACxBA,IACAvM,KAAKkR,WAAa3E,oCAxD1BrJ,OAAAC,eAAI0N,EAAAzN,UAAA,iBAAc,KAAlB,WACI,OAAOpD,KAAK+S,aAAe/S,KAAKkH,4CAGpChE,OAAAC,eAAI0N,EAAAzN,UAAA,YAAS,KAAb,WACI,GAAIpD,KAAKoS,SACL,OAAOpS,KAAKoS,SAAS7K,2CAI7BrE,OAAAC,eAAI0N,EAAAzN,UAAA,gBAAa,KAAjB,WACI,OAAOpD,KAAK8Q,WAAWyC,cAAcjL,6CA6BzCpF,OAAAC,eACI0N,EAAAzN,UAAA,SAAM,KAGV,WACI,OAAOpD,KAAKyT,aALhB,SACWtM,GACPnH,KAAKyT,QAAUtM,mCAMnBjE,OAAAC,eAAwB0N,EAAAzN,UAAA,YAAS,KAAjC,SAAkCmJ,GAC1BA,IACAvM,KAAKmR,WAAa5E,oCAU1BrJ,OAAAC,eAAmB0N,EAAAzN,UAAA,OAAI,KAMvB,WACI,QAAIpD,KAAKmH,QACEnH,KAAKoR,WARpB,SAAwB7E,GAChBA,IACAvM,KAAKoR,MAAQ7E,oCAYrBrJ,OAAAC,eAAuB0N,EAAAzN,UAAA,WAAQ,KAM/B,WACI,QAAIpD,KAAKmH,QACEnH,KAAKqR,eARpB,SAAgC9E,GACxBA,IACAvM,KAAKqR,UAAY9E,oCAiBzBsE,EAAAzN,UAAAsQ,eAAA,SAAelS,GACPxB,KAAKkG,MAAMkC,eAAiBpI,KAAK2T,oBACjC3T,KAAKsB,UAKbuP,EAAAzN,UAAAwQ,YAAA,SAAYpS,GACJxB,KAAK+I,UAAY/I,KAAK2R,cACtB3R,KAAKoS,SAASlJ,gBAKtB2H,EAAAzN,UAAAyQ,aAAA,SAAarS,GACLxB,KAAK+I,UAAY/I,KAAK2R,cACtB3R,KAAKoS,SAASrJ,YAUtB8H,EAAAzN,UAAA0Q,SAAA,WACI9T,KAAKuR,YAAcvR,KAAKmI,aAAaoF,SAAS9K,OAAS,EAEvDzC,KAAKgC,QAAU,IAAInC,EAAQ,CACvBmD,QAAShD,KAAKmI,aACdzE,UAAW1D,KAAK0D,UAChBJ,eAAgB,CACZrC,UAAa,kBACbE,QAAW,mBAInBnB,KAAKgC,QAAQgE,GAAG,aAAchG,KAAKuB,kBACnCvB,KAAKgC,QAAQgE,GAAG,mBAAoBhG,KAAK6G,uBACzC7G,KAAKgC,QAAQgE,GAAG,WAAYhG,KAAKsC,gBACjCtC,KAAKgC,QAAQgE,GAAG,YAAahG,KAAKuB,kBAClCvB,KAAKgC,QAAQgE,GAAG,UAAWhG,KAAKsC,gBAChCtC,KAAKgC,QAAQgE,GAAG,MAAOhG,KAAKsS,WAE5BtS,KAAK+T,iBAGTlD,EAAAzN,UAAA4Q,gBAAA,WACIhU,KAAKiU,eACLjU,KAAKkH,WAAalH,KAAKkU,gBACvBlU,KAAKmU,QAAU3B,MAAMxS,KAAKkH,YAAYkN,KAAK,GAC3CpU,KAAK+Q,IAAIsD,gBACTrU,KAAKoS,SAAS3J,cACdzI,KAAK2T,mBAAqB3T,KAAKsU,cAG/BtU,KAAKuU,oBAGT1D,EAAAzN,UAAAoR,YAAA,SAAYC,IACJA,EAAQnI,OAASmI,EAAQ/C,QAAU+C,EAAQtN,UAC3CnH,KAAK+T,gBACL/T,KAAKiU,eACLjU,KAAKoS,SAAS3J,cACdzI,KAAK+Q,IAAIsD,kBAIjBxD,EAAAzN,UAAAsR,YAAA,WACI1U,KAAKgC,QAAQwB,WAIjBqN,EAAAzN,UAAA6Q,aAAA,WACIjU,KAAKoJ,mBAAqB,CACtBuL,GAAI3U,KAAK2U,GACTxM,aAAcnI,KAAK8Q,WAAWyC,cAAcC,cAAc,mBAC1D3E,YAAa7O,KAAK8Q,WAAWyC,cAC7BpM,OAAQnH,KAAKmH,OACbW,UAAW9H,KAAK4U,eAChBnN,KAAMzH,KAAKyH,KACXwB,iBAAkBjJ,KAAKiJ,iBACvB5B,mBAAoBrH,KAAKqH,mBACzBe,aAAcpI,KAAKsM,MACnB5E,OAAQ1H,KAAK0H,OACbC,iBAAkB3H,KAAK2H,iBACvBC,mBAAoB5H,KAAK4H,mBACzBC,yBAA0B7H,KAAK6H,yBAC/BgN,gBAAiB7U,KAAK6U,gBACtBC,aAAc9U,KAAKwR,OACnB1K,WAAY9G,KAAK8G,WACjBU,SAAUxH,KAAKwH,UAGnBxH,KAAKkG,MAAQ,IAAIuK,EAAMzQ,KAAKoJ,oBAC5BpJ,KAAKmG,MAAQ,IAAImH,EAAMtN,KAAKoJ,mBAAoBpJ,KAAKkG,OACrDlG,KAAKoG,UAAY,IAAI+C,EAAUnJ,KAAKoJ,mBAAoBpJ,KAAKkG,MAAOlG,KAAKmG,OACzEnG,KAAKqG,MAAQ,IAAIgI,EAAMrO,KAAKoJ,mBAAoBpJ,KAAKkG,MAAOlG,KAAKmG,MAAOnG,KAAKoG,WAC7EpG,KAAKoS,SAAW,IAAInM,EAASjG,KAAKoJ,mBAAoBpJ,KAAKkG,MAAOlG,KAAKmG,MAAOnG,KAAKoG,UAAWpG,KAAKqG,OAE/FrG,KAAK+I,UACL/I,KAAKoS,SAASrJ,YAItB8H,EAAAzN,UAAA9B,OAAA,WACItB,KAAK+U,cAAgB/U,KAAKgV,YAC1BhV,KAAK2T,mBAAqB3T,KAAKsU,cAE/BtU,KAAKoJ,mBAAmBtB,UAAY9H,KAAK4U,eACzC5U,KAAKmG,MAAM+B,iBAAiBlI,KAAKoJ,oBACjCpJ,KAAKoS,SAASlK,iBAAiBlI,KAAKoJ,oBACpCpJ,KAAKoG,UAAU8B,iBAAiBlI,KAAKoJ,oBACrCpJ,KAAKqG,MAAM6B,iBAAiBlI,KAAKoJ,oBACjCpJ,KAAKkG,MAAMgC,iBAAiBlI,KAAKoJ,oBACjCpJ,KAAKoS,SAAS3J,cACdzI,KAAKqG,MAAMiJ,OAAO,GAClBtP,KAAK+Q,IAAIsD,iBAGbxD,EAAAzN,UAAAmR,iBAAA,WAAA,IAAAxU,EAAAC,KACqB,IAAIiV,kBAAiB,SAACC,GACnCnV,EAAKoV,kBAQAC,QAAQpV,KAAKmI,aALT,CACTkN,YAAY,EACZC,WAAW,EACXC,eAAe,KAKvB1E,EAAAzN,UAAA+R,aAAA,WACInV,KAAKkH,WAAalH,KAAKkU,gBACvBlU,KAAKoS,SAAS3J,cACdzI,KAAK+Q,IAAIsD,iBAGbxD,EAAAzN,UAAA2Q,cAAA,WACI/T,KAAKwV,gBAAkBxV,KAAK0R,OAAS,KACrC1R,KAAKyV,eAAiBzV,KAAKsM,MAAQ,MAGvCuE,EAAAzN,UAAAwF,SAAA,SAASpD,GACL,OAAOxF,KAAKoS,SAASxJ,SAASpD,IAsClCqL,EAAAzN,UAAAsS,iCAAA,SAAiClU,GACK,mBAA9BA,EAAMmU,OAAkB,WACxB3V,KAAKoS,SAASzJ,uBAItBkI,EAAAzN,UAAAwR,aAAA,WACI,IAAIgB,EAAe5V,KAAKsU,cAExB,OAAItU,KAAK6V,aAGGD,GAFK5V,KAAK6V,YAAc,EAAI7V,KAAK0H,OAAS,IACtB1H,KAAK6V,YAAc,IACT7V,KAAK6V,YAGvB,SAApB7V,KAAKmR,WACEyE,EAEA5V,KAAKmR,YAIpBN,EAAAzN,UAAAyF,KAAA,WACI7I,KAAKoS,SAASvJ,KAAK7I,KAAK+R,eACxB/R,KAAKoS,SAASlJ,gBAGlB2H,EAAAzN,UAAA0F,KAAA,WACI9I,KAAKoS,SAAStJ,KAAK9I,KAAK+R,eACxB/R,KAAKoS,SAASlJ,gBAGlB2H,EAAAzN,UAAA2D,oBAAA,WACI,GAAI/G,KAAKoS,SACL,OAAOpS,KAAKoS,SAASrL,uBAI7B8J,EAAAzN,UAAA4D,oBAAA,WACI,GAAIhH,KAAKoS,SACL,OAAOpS,KAAKoS,SAASpL,uBAI7B6J,EAAAzN,UAAA8Q,cAAA,WACI,OAAIlU,KAAKmH,OACEnH,KAAKmH,OAAO1E,OAEZzC,KAAKmI,aAAaoF,SAAS9K,iCAxZ7CqT,EAAAA,UAASC,KAAA,CAAC,CACPC,SAAU,uBACVC,SAAA,wvIAdkCC,EAAAA,kBAA9BC,EAAAA,qDA6GHC,EAAAA,mBAEAC,EAAAA,sBACAA,EAAAA,qBACAA,EAAAA,wBACAA,EAAAA,gCACAA,EAAAA,4BACAA,EAAAA,oBACAA,EAAAA,4BACAA,EAAAA,sBACAA,EAAAA,yBACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,wCACAA,EAAAA,+BACAA,EAAAA,gCACAA,EAAAA,kCACAA,EAAAA,yBACAA,EAAAA,2BACAA,EAAAA,6BACAA,EAAAA,0BACAA,EAAAA,sBACAA,EAAAA,6BACAA,EAAAA,2BACAA,EAAAA,sBAEAA,EAAAA,yBAQAA,EAAAA,MAAKN,KAAA,CAAC,gCAMNM,EAAAA,MAAKN,KAAA,CAAC,yBAMNM,EAAAA,MAAKN,KAAA,CAAC,0BAcNM,EAAAA,MAAKN,KAAA,CAAC,uCAcNO,EAAAA,YAAWP,KAAA,CAAC,2CACZO,EAAAA,YAAWP,KAAA,CAAC,wCACZO,EAAAA,YAAWP,KAAA,CAAC,uCAEZQ,EAAAA,aAAYR,KAAA,CAAC,gBAAiB,CAAC,gCAO/BQ,EAAAA,aAAYR,KAAA,CAAC,YAAa,CAAC,iCAO3BQ,EAAAA,aAAYR,KAAA,CAAC,aAAc,CAAC,oBCjLjC,iCApBCS,EAAAA,SAAQT,KAAA,CAAC,CACNU,aAAc,CACV5F,GAEJ6F,QAAS,CACLC,EAAAA,cAEJC,QAAS,CACL/F,GAEJgG,UAAW,GAGXC,UAAW,GAGXC,gBAAiB,CACblG","sourcesContent":["export interface Properties {\r\n    element: HTMLElement;\r\n    listeners?: 'auto' | 'mouse and touch';\r\n    touchListeners?: any;\r\n    mouseListeners?: any;\r\n    otherListeners?: any;\r\n    resize?: boolean;\r\n}\r\n\r\nexport type EventType = undefined | 'touchend' | 'pan' | 'pinch' | 'horizontal-swipe' | 'vertical-swipe' | 'tap' | 'longtap';\r\nexport type TouchHandler = 'handleTouchstart' | 'handleTouchmove' | 'handleTouchend';\r\nexport type MouseHandler = 'handleMousedown' | 'handleMousemove' | 'handleMouseup';\r\n\r\nexport class Touches {\r\n    properties: Properties;\r\n    element: HTMLElement;\r\n    elementPosition: ClientRect;\r\n    eventType: EventType = undefined;\r\n    handlers: any = {};\r\n    startX = 0;\r\n    startY = 0;\r\n    lastTap = 0;\r\n    doubleTapTimeout: any;\r\n    doubleTapMinTimeout = 300;\r\n    tapMinTimeout = 200;\r\n    touchstartTime = 0;\r\n    i: number = 0;\r\n    isMousedown = false;\r\n\r\n    _touchListeners: any = {\r\n        \"touchstart\": \"handleTouchstart\",\r\n        \"touchmove\": \"handleTouchmove\",\r\n        \"touchend\": \"handleTouchend\"\r\n    }\r\n    _mouseListeners: any = {\r\n        \"mousedown\": \"handleMousedown\",\r\n        \"mousemove\": \"handleMousemove\",\r\n        \"mouseup\": \"handleMouseup\",\r\n        \"wheel\": \"handleWheel\"\r\n    }\r\n    _otherListeners: any = {\r\n        \"resize\": \"handleResize\"\r\n    }\r\n\r\n    get touchListeners() {\r\n        return this.properties.touchListeners ? this.properties.touchListeners : this._touchListeners;\r\n    }\r\n\r\n    get mouseListeners() {\r\n        return this.properties.mouseListeners ? this.properties.mouseListeners : this._mouseListeners;\r\n    }\r\n\r\n    get otherListeners() {\r\n        return this.properties.otherListeners ? this.properties.otherListeners : this._otherListeners;\r\n    }\r\n\r\n    constructor(properties: Properties) {\r\n        this.properties = properties;\r\n        this.element = this.properties.element;\r\n        this.elementPosition = this.getElementPosition();\r\n\r\n        this.toggleEventListeners('addEventListener');\r\n    }\r\n\r\n    destroy() {\r\n        this.toggleEventListeners('removeEventListener');\r\n    }\r\n\r\n    toggleEventListeners(action: 'addEventListener' | 'removeEventListener') {\r\n        let listeners;\r\n\r\n        if (this.properties.listeners === 'mouse and touch') {\r\n            listeners = Object.assign(this.touchListeners, this.mouseListeners);\r\n        } else {\r\n            listeners = this.detectTouchScreen() ? this.touchListeners : this.mouseListeners;\r\n        }\r\n\r\n        if (this.properties.resize) {\r\n            listeners = Object.assign(listeners, this.otherListeners);\r\n        }\r\n\r\n        for (var listener in listeners) {\r\n            const handler: MouseHandler = listeners[listener];\r\n\r\n            // Window\r\n            if (listener === \"resize\") {\r\n                if (action === 'addEventListener') {\r\n                    window.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    window.removeEventListener(listener, this[handler], false);\r\n                }\r\n            // Document\r\n            } else if (listener === 'mouseup' || listener === \"mousemove\") {\r\n                if (action === 'addEventListener') {\r\n                    document.addEventListener(listener, this[handler], {passive: false});\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    document.removeEventListener(listener, this[handler], false);\r\n                }\r\n            // Element\r\n            } else {\r\n                if (action === 'addEventListener') {\r\n                    this.element.addEventListener(listener, this[handler], false);\r\n                }\r\n                if (action === 'removeEventListener') {\r\n                    this.element.removeEventListener(listener, this[handler], false);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    addEventListeners(listener: string) {\r\n        const handler: MouseHandler = this._mouseListeners[listener];\r\n        window.addEventListener(listener, this[handler], false);\r\n    }\r\n\r\n    removeEventListeners(listener: string) {\r\n        const handler: MouseHandler = this._mouseListeners[listener];\r\n        window.removeEventListener(listener, this[handler], false);\r\n    }\r\n\r\n    /*\r\n     * Listeners\r\n     */\r\n\r\n    /* Touchstart */\r\n\r\n    handleTouchstart = (event: any) => {\r\n        this.elementPosition = this.getElementPosition();\r\n        this.touchstartTime = new Date().getTime();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getTouchstartPosition(event);\r\n        }\r\n\r\n        this.runHandler(\"touchstart\", event);\r\n    }\r\n\r\n\r\n    /* Touchmove */\r\n\r\n    handleTouchmove = (event: any) => {\r\n        const touches = event.touches;\r\n\r\n        // Pan\r\n        if (this.detectPan(touches)) {\r\n            this.runHandler(\"pan\", event);\r\n        }\r\n\r\n        // Pinch\r\n        if (this.detectPinch(event)) {\r\n            this.runHandler(\"pinch\", event);\r\n        }\r\n\r\n        // Linear swipe\r\n        switch (this.detectLinearSwipe(event)) {\r\n            case \"horizontal-swipe\":\r\n                event.swipeType = \"horizontal-swipe\";\r\n                this.runHandler(\"horizontal-swipe\", event);\r\n                break;\r\n            case \"vertical-swipe\":\r\n                event.swipeType = \"vertical-swipe\";\r\n                this.runHandler(\"vertical-swipe\", event);\r\n                break;\r\n        }\r\n\r\n        // Linear swipe\r\n        if (this.detectLinearSwipe(event) ||\r\n            this.eventType === 'horizontal-swipe' ||\r\n            this.eventType === 'vertical-swipe') {\r\n\r\n            this.handleLinearSwipe(event);\r\n        }\r\n    }\r\n\r\n    handleLinearSwipe(event: any) {\r\n        //event.preventDefault();\r\n\r\n        this.i++;\r\n\r\n        if (this.i > 3) {\r\n            this.eventType = this.getLinearSwipeType(event);\r\n        }\r\n\r\n        if (this.eventType === 'horizontal-swipe') {\r\n            this.runHandler('horizontal-swipe', event);\r\n        }\r\n\r\n        if (this.eventType === 'vertical-swipe') {\r\n            this.runHandler('vertical-swipe', event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Touchend */\r\n\r\n    handleTouchend = (event: any) => {\r\n        const touches = event.touches;\r\n\r\n        // Double Tap\r\n        if (this.detectDoubleTap()) {\r\n            this.runHandler(\"double-tap\", event);\r\n        }\r\n\r\n        // Tap\r\n        this.detectTap();\r\n\r\n        this.runHandler(\"touchend\", event);\r\n        this.eventType = 'touchend';\r\n\r\n        if (touches && touches.length === 0) {\r\n            this.eventType = undefined;\r\n            this.i = 0;\r\n        }\r\n    }\r\n\r\n\r\n    /* Mousedown */\r\n\r\n    handleMousedown = (event: any) => {\r\n        this.isMousedown = true;\r\n        this.elementPosition = this.getElementPosition();\r\n        this.touchstartTime = new Date().getTime();\r\n\r\n        if (this.eventType === undefined) {\r\n            this.getMousedownPosition(event);\r\n        }\r\n\r\n        this.runHandler(\"mousedown\", event);\r\n    }\r\n\r\n\r\n    /* Mousemove */\r\n\r\n    handleMousemove = (event: any) => {\r\n        //event.preventDefault();\r\n        \r\n        if (!this.isMousedown) {\r\n            return;\r\n        }\r\n\r\n        // Pan\r\n        this.runHandler(\"pan\", event);\r\n\r\n        // Linear swipe\r\n        switch (this.detectLinearSwipe(event)) {\r\n            case \"horizontal-swipe\":\r\n                event.swipeType = \"horizontal-swipe\";\r\n                this.runHandler(\"horizontal-swipe\", event);\r\n                break;\r\n            case \"vertical-swipe\":\r\n                event.swipeType = \"vertical-swipe\";\r\n                this.runHandler(\"vertical-swipe\", event);\r\n                break;\r\n        }\r\n\r\n        // Linear swipe\r\n        if (this.detectLinearSwipe(event) ||\r\n            this.eventType === 'horizontal-swipe' ||\r\n            this.eventType === 'vertical-swipe') {\r\n\r\n            this.handleLinearSwipe(event);\r\n        }\r\n    }\r\n\r\n\r\n    /* Mouseup */\r\n\r\n    handleMouseup = (event: any) => {\r\n\r\n        // Tap\r\n        this.detectTap();\r\n\r\n        this.isMousedown = false;\r\n        this.runHandler(\"mouseup\", event);\r\n        this.eventType = undefined;\r\n        this.i = 0;\r\n    }\r\n\r\n\r\n    /* Wheel */\r\n\r\n    handleWheel = (event: any) => {\r\n        this.runHandler(\"wheel\", event);\r\n    }\r\n\r\n    /* Resize */\r\n\r\n    handleResize = (event: any) => {\r\n        this.runHandler(\"resize\", event);\r\n    }\r\n\r\n    runHandler(eventName: any, response: any) {\r\n        if (this.handlers[eventName]) {\r\n            this.handlers[eventName](response);\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n     * Detection\r\n     */\r\n\r\n    detectPan(touches: any) {\r\n        return touches.length === 1 && !this.eventType || this.eventType === 'pan';\r\n    }\r\n\r\n    detectDoubleTap() {\r\n        if (this.eventType != undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.lastTap;\r\n\r\n        clearTimeout(this.doubleTapTimeout);\r\n\r\n        if (tapLength < this.doubleTapMinTimeout && tapLength > 0) {\r\n            return true;\r\n        } else {\r\n            this.doubleTapTimeout = setTimeout(() => {\r\n                clearTimeout(this.doubleTapTimeout);\r\n            }, this.doubleTapMinTimeout);\r\n        }\r\n        this.lastTap = currentTime;\r\n\r\n        return undefined;\r\n    }\r\n\r\n    detectTap(): void {\r\n        if (this.eventType != undefined) {\r\n            return;\r\n        }\r\n\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.touchstartTime;\r\n\r\n        if (tapLength > 0) {\r\n            if (tapLength < this.tapMinTimeout) {\r\n                this.runHandler(\"tap\", event);\r\n            } else {\r\n                this.runHandler(\"longtap\", event);\r\n            }\r\n        }\r\n    }\r\n\r\n    detectPinch(event: any) {\r\n        const touches = event.touches;\r\n        return (touches.length === 2 && this.eventType === undefined) || this.eventType === 'pinch';\r\n    }\r\n\r\n    detectLinearSwipe(event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            if (touches.length === 1 && !this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\r\n                return this.getLinearSwipeType(event);\r\n            }\r\n        } else {\r\n            if (!this.eventType || this.eventType === 'horizontal-swipe' || this.eventType === 'vertical-swipe') {\r\n                return this.getLinearSwipeType(event);\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    getLinearSwipeType(event: any) {\r\n        if (this.eventType !== 'horizontal-swipe' && this.eventType !== 'vertical-swipe') {\r\n            const movementX = Math.abs(this.moveLeft(0, event) - this.startX);\r\n            const movementY = Math.abs(this.moveTop(0, event) - this.startY);\r\n\r\n            if ((movementY * 3) > movementX) {\r\n                return 'vertical-swipe';\r\n            } else {\r\n                return 'horizontal-swipe';\r\n            }\r\n        } else {\r\n            return this.eventType;\r\n        }\r\n    }\r\n\r\n    getElementPosition() {\r\n        return this.element.getBoundingClientRect();\r\n    }\r\n\r\n    getTouchstartPosition(event: any) {\r\n        this.startX = event.touches[0].clientX - this.elementPosition.left;\r\n        this.startY = event.touches[0].clientY - this.elementPosition.top;\r\n    }\r\n\r\n    getMousedownPosition(event: any) {\r\n        this.startX = event.clientX - this.elementPosition.left;\r\n        this.startY = event.clientY - this.elementPosition.top;\r\n    }\r\n\r\n    moveLeft(index: any, event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            return touches[index].clientX - this.elementPosition.left;\r\n        } else {\r\n            return event.clientX - this.elementPosition.left;\r\n        }\r\n    }\r\n\r\n    moveTop(index: any, event: any) {\r\n        const touches = event.touches;\r\n\r\n        if (touches) {\r\n            return touches[index].clientY - this.elementPosition.top;\r\n        } else {\r\n            return event.clientY - this.elementPosition.top;\r\n        }\r\n    }\r\n\r\n    detectTouchScreen() {\r\n        var prefixes = ' -webkit- -moz- -o- -ms- '.split(' ');\r\n        var mq = function(query: any) {\r\n            return window.matchMedia(query).matches;\r\n        }\r\n\r\n        if (('ontouchstart' in window)) {\r\n            return true;\r\n        }\r\n\r\n        // include the 'heartz' as a way to have a non matching MQ to help terminate the join\r\n        // https://git.io/vznFH\r\n        var query = ['(', prefixes.join('touch-enabled),('), 'heartz', ')'].join('');\r\n        return mq(query);\r\n    }\r\n\r\n\r\n    /* Public properties and methods */\r\n    on(event: EventType, handler: Function) {\r\n        if (event) {\r\n            this.handlers[event] = handler;\r\n        }\r\n    }\r\n}","import {Properties} from './interfaces';\r\n\r\nexport class Carousel {\r\n    cellsElement: HTMLElement | undefined;\r\n\r\n    /* The slide length has been limited by the limitSlideLength() method */\r\n    isSlideLengthLimited: boolean = false;\r\n\r\n    isContentImages: boolean = true;\r\n    visibleWidth!: number;\r\n    isLazyLoad: boolean = true;\r\n    isContainerLocked: boolean = true;\r\n    alignCells: \"left\" | \"center\" = \"left\";\r\n    initialContainerPosition: number = 0;\r\n    autoplayId: any;\r\n    containerPullLimit = 100;\r\n\r\n    get cellLength() {\r\n        return this.cells.cellLength;\r\n    }\r\n\r\n    get cellLengthInLightDOMMode() {\r\n        if (this.images) {\r\n            let cellLength = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\r\n            if (cellLength > this.images.length) {\r\n                cellLength = this.images.length;\r\n            }\r\n            return cellLength;\r\n        } else {\r\n            return this.cellLength;\r\n        }\r\n    }\r\n\r\n    get lastCellIndex() {\r\n        return this.images.length ? (this.images.length - 1) : (this.cells.cellLength - 1);\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.utils.overflowCellsLimit;\r\n    }\r\n\r\n    get cellLimit() {\r\n        if (this.isLightDOM) {\r\n            let cellLimit = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\r\n\r\n            if (cellLimit < this.numberOfVisibleCells) {\r\n                cellLimit = this.numberOfVisibleCells;\r\n            }\r\n\r\n            return cellLimit;\r\n        } else {\r\n            return this.properties.images.length;\r\n        }\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.properties.lightDOM || this.properties.loop;\r\n    }\r\n\r\n    get images() {\r\n        return this.properties.images;\r\n    }\r\n\r\n    get margin() {\r\n        return this.properties.margin;\r\n    }\r\n\r\n    get minSwipeDistance() {\r\n        return this.properties.minSwipeDistance;\r\n    }\r\n\r\n    get transitionDuration() {\r\n        return this.properties.transitionDuration;\r\n    }\r\n\r\n    get transitionTimingFunction() {\r\n        return this.properties.transitionTimingFunction;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.properties.cellWidth + this.margin;\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return this.utils.numberOfVisibleCells;\r\n    }\r\n\r\n    get lapCounter() {\r\n        return Math.floor(this.slide.counter / this.cellLengthInLightDOMMode);\r\n    }\r\n\r\n    get slideCounter() {\r\n        return this.slide.counter;\r\n    }\r\n\r\n    constructor(\r\n        private properties: Properties,\r\n        private utils: any,\r\n        private cells: any,\r\n        private container: any,\r\n        private slide: any) {\r\n\r\n        this.init();\r\n    }\r\n\r\n    updateProperties(properties: Properties) {\r\n        this.properties = properties;\r\n    }\r\n\r\n    init() {\r\n        this.cellsElement = this.properties.cellsElement;\r\n        this.visibleWidth = this.properties.visibleWidth || this.cellsElement!.parentElement!.clientWidth;\r\n    }\r\n\r\n    destroy() {\r\n        clearInterval(this.autoplayId);\r\n    }\r\n\r\n    lineUpCells() {\r\n        this.cells.lineUp();\r\n    }\r\n\r\n    handleTouchstart = (event: any) => {\r\n        this.container.handleTouchstart();\r\n        this.slide.handleTouchstart(event);\r\n    }\r\n\r\n    handleHorizontalSwipe = (event: any) => {\r\n        this.container.handleHorizontalSwipe();\r\n    }\r\n\r\n    handleTouchend = (event: any) => {\r\n        if (this.properties.freeScroll) {\r\n            this.container.handleTouchend();\r\n        } else {\r\n            this.container.handleTouchend(true);\r\n            this.slide.handleTouchend(event);\r\n        }\r\n    }\r\n\r\n    handleTransitionend() {\r\n        this.slide.handleTransitionend();\r\n    }\r\n\r\n    getImage(index:number) {\r\n        return this.cells.getImage(index);\r\n    }\r\n\r\n    next(length: number = 1) {\r\n        if (!this.isNextArrowDisabled()) {\r\n            this.slide.next(length);\r\n        }\r\n    }\r\n\r\n    prev(length: number = 1) {\r\n        this.slide.prev(length);\r\n    }\r\n\r\n    isNextArrowDisabled = () => {\r\n        return this.slide.isNextArrowDisabled();\r\n    }\r\n\r\n    isPrevArrowDisabled = () => {\r\n        return this.slide.isPrevArrowDisabled();\r\n    }\r\n\r\n    autoplay() {\r\n        this.autoplayId = setInterval(() => {\r\n            this.next();\r\n        }, this.properties.autoplayInterval);\r\n    }\r\n\r\n    stopAutoplay() {\r\n        if (this.autoplayId) {\r\n            clearInterval(this.autoplayId);\r\n        }\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport class Container {\r\n    /* The index of the new position relative to \r\n     * the active index, for example -1 or +1 \r\n     */\r\n    newPositionIndex: number = 0;\r\n    isPositionCorrection: boolean = false;\r\n    initialPositionX: number = 0;\r\n    initialElementPositionX: number = 0;\r\n    isLocked: boolean = true;\r\n    pullLimit: number = 100;\r\n    startTime: number = 0;\r\n    startX: number = 0;\r\n    moveX: number = 0;\r\n    isSwipeInProgress: boolean = false;\r\n\r\n    get visibleWidth() {\r\n        return this.utils.visibleWidth;\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.utils.overflowCellsLimit;\r\n    }\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    get element() {\r\n        return this.carouselProperties.cellsElement;\r\n    }\r\n\r\n    get freeScroll() {\r\n        return this.carouselProperties.freeScroll;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return this.utils.numberOfVisibleCells;\r\n    }\r\n\r\n    get transitionDuration() {\r\n        return this.carouselProperties.transitionDuration;\r\n    }\r\n\r\n    get transitionTimingFunction() {\r\n        return this.carouselProperties.transitionTimingFunction;\r\n    }\r\n\r\n    get cellLength() {\r\n        if (this.images) {\r\n            return this.images.length;\r\n        } else {\r\n            return this.cells.cellLength;\r\n        }\r\n    }\r\n\r\n    get cellLengthInLightDOMMode() {\r\n        if (this.images) {\r\n            let cellLength = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\r\n            if (cellLength > this.images.length) {\r\n                cellLength = this.images.length;\r\n            }\r\n            return cellLength;\r\n        } else {\r\n            return this.cellLength;\r\n        }\r\n    }\r\n\r\n    get tooFewCells() {\r\n        return this.numberOfVisibleCells > this.cellLength;\r\n    }\r\n\r\n    get disabled() {\r\n        return this.tooFewCells;\r\n    }\r\n\r\n    get margin() {\r\n        return this.carouselProperties.margin;\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.carouselProperties.lightDOM || this.carouselProperties.loop;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties,\r\n        private utils:any,\r\n        private cells:any) {\r\n\r\n        this.init()\r\n    }\r\n\r\n    updateProperties(carouselProperties: CarouselProperties) {\r\n        this.carouselProperties = carouselProperties;\r\n    }\r\n\r\n    init() {\r\n        this.setWidth();\r\n    }\r\n\r\n    handleTouchstart() {\r\n        this.startX = this.utils.getStartX(event);\r\n        this.startTime = new Date().getTime();\r\n        this.initialElementPositionX = this.getInitialElementPositionX();\r\n    }\r\n\r\n    handleHorizontalSwipe() {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        if (!this.isSwipeInProgress) {\r\n            this.startX = this.utils.getStartX(event);\r\n            this.startTime = new Date().getTime();\r\n            this.initialElementPositionX = this.getInitialElementPositionX();\r\n        }\r\n\r\n        this.isSwipeInProgress = true;\r\n        this.moveX = this.utils.getMoveX(event);\r\n        this.move();\r\n    }\r\n\r\n    handleTouchend(simpleProcessing: boolean = false) {\r\n        if (this.disabled) {\r\n            return;\r\n        }\r\n\r\n        /* If touchend was passed to the Slide class */\r\n        if (simpleProcessing) {\r\n            this.isSwipeInProgress = false;\r\n            return;\r\n        }\r\n\r\n        this.isSwipeInProgress = false;\r\n        this.finishMoving();\r\n        this.clearInitialValues();\r\n    }\r\n\r\n    move() {\r\n        let positionX: number = this.getMovePositionX();\r\n        const isPulled = this.detectPulled();\r\n        const direction = this.getDirection();\r\n\r\n        if (isPulled) {\r\n            if (isPulled.edge === \"left\" && direction === \"right\" ||\r\n                isPulled.edge === \"right\" && direction === \"left\") {\r\n                positionX = this.slowdownOnPull(positionX);\r\n            }\r\n        }\r\n\r\n        this.transformPositionX(positionX, 0);\r\n\r\n        if (this.freeScroll) {\r\n            this.initialPositionX = positionX;\r\n        }\r\n\r\n        if (isPulled) {\r\n            if (isPulled.edge === 'left' && isPulled.overflowX > this.pullLimit) {\r\n                this.initialPositionX = 0;\r\n            }\r\n            if (isPulled.edge === 'right' && isPulled.overflowX > this.pullLimit) {\r\n                this.initialPositionX = positionX;\r\n            }\r\n        }\r\n    }\r\n\r\n    getMovePositionX() {\r\n        const distance = this.getDistance();\r\n        return this.initialElementPositionX - distance;\r\n    }\r\n\r\n    getDistance() {\r\n        return this.startX - this.moveX;\r\n    }\r\n\r\n    /* If the container is pulled out of the left or right border */\r\n    detectPulled() {\r\n        const currentPositionX = this.getCurrentPositionX();\r\n\r\n        if (currentPositionX > 0) {\r\n            return {\r\n                edge: 'left',\r\n                positionX: currentPositionX,\r\n                overflowX: Math.abs(currentPositionX)\r\n            }\r\n        }\r\n\r\n        if (currentPositionX < this.getEndPosition()) {\r\n            return {\r\n                edge: 'right',\r\n                positionX: currentPositionX,\r\n                overflowX: Math.abs(currentPositionX - this.getEndPosition())\r\n            }\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    slowdownOnPull(_positionX: number) {\r\n        let distance = Math.abs(this.getDistance());\r\n        const endPosition = this.getEndPosition();\r\n        const isPulled = this.detectPulled();\r\n\r\n        if (!isPulled) {\r\n            return 0;\r\n        }\r\n\r\n        const decelerationRatio = 3 + isPulled.overflowX / 50;\r\n        let positionX:number = 0;\r\n\r\n        if (isPulled.edge === 'left') {\r\n\r\n            if (this.initialElementPositionX < 0) {\r\n                distance = distance - Math.abs(this.initialElementPositionX);\r\n            }\r\n\r\n            const rubberPositionX = distance / decelerationRatio;\r\n            positionX = rubberPositionX;\r\n\r\n            if (this.initialElementPositionX > 0) {\r\n                positionX = this.initialElementPositionX + rubberPositionX;\r\n            }\r\n\r\n            if (positionX > this.pullLimit) {\r\n                positionX = this.pullLimit;\r\n            }\r\n        }\r\n\r\n        if (isPulled.edge === 'right') {\r\n            const rubberPositionX = endPosition + (((this.initialElementPositionX - distance) - endPosition) / decelerationRatio);\r\n            const containerWidth = this.getWidth();\r\n\r\n            positionX = rubberPositionX;\r\n\r\n            if (this.initialElementPositionX < -(containerWidth - this.visibleWidth)) {\r\n                positionX = ((containerWidth - this.visibleWidth) + this.initialElementPositionX) + rubberPositionX;\r\n            }\r\n\r\n            if (positionX < endPosition - this.pullLimit) {\r\n                positionX = endPosition - this.pullLimit;\r\n            }\r\n        }\r\n\r\n        return positionX;\r\n    }\r\n\r\n    finishMoving() {\r\n        const positionX = this.getMovePositionX();\r\n        let newPositionX:number = 0;\r\n\r\n        if (this.freeScroll) {\r\n            newPositionX = this.getInertia();\r\n        }\r\n\r\n        /* Align container while pulling */\r\n        newPositionX = this.getAlignedPositionOnPull(newPositionX);\r\n\r\n        this.transformPositionX(newPositionX);\r\n        this.setInitialPosition(positionX);\r\n    }\r\n\r\n    /* Returns the new position of the container with inertia */\r\n    getInertia() {\r\n        const distance = this.getDistance();\r\n        const currentTime = new Date().getTime();\r\n        const tapLength = currentTime - this.startTime;\r\n        let inertia = (distance / tapLength) * 100;\r\n\r\n        return this.initialPositionX - inertia;\r\n    }\r\n\r\n    getAlignedPositionOnPull(newPositionX:number) {\r\n        const direction = this.getDirection();\r\n\r\n        if (direction === 'left') {\r\n            let endPosition = this.getEndPosition();\r\n            if (newPositionX < endPosition) {\r\n                return endPosition;\r\n            }\r\n        }\r\n        if (direction === 'right') {\r\n            if (newPositionX > 0) {\r\n                return 0;\r\n            }\r\n        }\r\n\r\n        return newPositionX;\r\n    }\r\n\r\n    getCurrentPositionX() {\r\n        const parentPosition = this.element!.parentElement!.getBoundingClientRect();\r\n        const position = this.element.getBoundingClientRect();\r\n        return position.left - parentPosition.left;\r\n    }\r\n\r\n    getEndPosition() {\r\n        if (this.isLightDOM) {\r\n            let imagesInContainer = this.cells.imageUtils.getImages();\r\n            return -(imagesInContainer.length * this.fullCellWidth - this.visibleWidth - this.margin);\r\n        } else {\r\n            const width = this.getWidth();\r\n            const visibleWidth = this.element!.parentElement!.clientWidth;\r\n            return visibleWidth - width;\r\n        }\r\n    }\r\n\r\n    transformPositionX(value:number, duration = this.transitionDuration) {\r\n        if (value === undefined) {\r\n            return;\r\n        }\r\n\r\n        this.element.style.transition = 'transform ' + duration + 'ms ' + this.transitionTimingFunction;\r\n        this.element.style.transform = 'translateX(' + value + 'px)';\r\n    }\r\n\r\n    getWidth() {\r\n        let width = this.cellLengthInLightDOMMode * this.fullCellWidth;\r\n        let totalImageWidth = this.cellLength * this.fullCellWidth;\r\n\r\n        if (totalImageWidth < width) {\r\n            width = totalImageWidth;\r\n        }\r\n\r\n        return this.isLightDOM ? width : totalImageWidth;\r\n    }\r\n\r\n    setWidth() {\r\n        const width = this.getWidth();\r\n        this.element.style.width = width + \"px\";\r\n    }\r\n\r\n    setInitialPosition(position:number) {\r\n        this.initialPositionX = position;\r\n    }\r\n\r\n    getElementPosition() {\r\n        return this.element.getBoundingClientRect();\r\n    }\r\n\r\n    getInitialElementPositionX() {\r\n        const carouselElementPosition = this.utils.getCarouselElementPosition()['left'];\r\n        return this.getElementPosition()['left'] - carouselElementPosition;\r\n    }\r\n\r\n    clearInitialValues() {\r\n        this.startX = this.moveX = 0;\r\n    }\r\n\r\n    getDirection() {\r\n        const direction = Math.sign(this.startX - this.moveX);\r\n\r\n        if (direction === -1) {\r\n            return 'right';\r\n        }\r\n        if (direction === 1) {\r\n            return 'left';\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n}","import {Properties as CarouselProperties, Image} from './interfaces';\r\n\r\nexport interface Cell {\r\n    index: number,\r\n    positionX: number,\r\n    img: {\r\n        image: Image,\r\n        imageIndex: number\r\n    }\r\n}\r\n\r\nexport class ImageUtils {\r\n    cellStack: Cell[] = [];\r\n    element:any;\r\n\r\n    constructor(element: HTMLElement | undefined) {\r\n        this.element = element;\r\n    }\r\n\r\n    getImages() {\r\n        return this.cellStack.filter(this.filter);\r\n    }\r\n\r\n    filter(cell: Cell) {\r\n        return cell.img !== undefined;\r\n    }\r\n}\r\n\r\nexport class Cells {\r\n    cells: HTMLCollection | undefined;\r\n    element!: HTMLElement;\r\n    visibleWidth: number | undefined;\r\n    counter: number = 0;\r\n    imageUtils;\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    get cellLength() {\r\n        return this.cells ? this.cells.length : 0;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get cellLengthInLightDOMMode() {\r\n        if (this.images) {\r\n            let cellLength = this.numberOfVisibleCells + this.overflowCellsLimit * 2;\r\n\r\n            if (cellLength > this.images.length) {\r\n                cellLength = this.images.length;\r\n            }\r\n            return cellLength;\r\n        } else {\r\n            return this.cellLength;\r\n        }\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return this.utils.numberOfVisibleCells;\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.utils.overflowCellsLimit;\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.carouselProperties.lightDOM || this.carouselProperties.loop;\r\n    }\r\n\r\n    constructor(\r\n        private carouselProperties: CarouselProperties,\r\n        private utils: any) {\r\n\r\n        this.imageUtils = new ImageUtils(this.element);\r\n        this.init(carouselProperties);\r\n    }\r\n\r\n    updateProperties(carouselProperties: CarouselProperties) {\r\n        this.carouselProperties = carouselProperties;\r\n    }\r\n\r\n    lineUp() {\r\n        const cells = this.element ? this.element.children : [];\r\n        this.imageUtils.cellStack = [];\r\n\r\n        for (var i = 0; i < cells.length; i++) {\r\n            let cell = cells[i];\r\n            let positionX = this.getCellPositionInContainer(i);\r\n            (cell as HTMLElement).style.transform = 'translateX(' + positionX + 'px)';\r\n            (cell as HTMLElement).style.width = this.carouselProperties.cellWidth + 'px';\r\n\r\n            if (this.getImage(i)) {\r\n                this.imageUtils.cellStack.push({\r\n                    index: i,\r\n                    positionX,\r\n                    img: this.getImage(i)!['image']\r\n                });\r\n            }\r\n        };\r\n    }\r\n\r\n    ifSequenceOfCellsIsChanged() {\r\n        const cells:any = this.element.children;\r\n        return cells[0]['style'].transform !== 'translateX(0px)';\r\n    }\r\n\r\n    getCellPositionInContainer(cellIndexInDOMTree: number) {\r\n        let positionIndex = this.getCellIndexInContainer(cellIndexInDOMTree);\r\n        return positionIndex * this.fullCellWidth;\r\n    }\r\n\r\n    getCellIndexInContainer(cellIndexInDOMTree: number) {\r\n        let positionIndex;\r\n\r\n        if (!this.isLightDOM) {\r\n            return cellIndexInDOMTree;\r\n        }\r\n\r\n        let cellLength = this.cellLengthInLightDOMMode;\r\n        let counter = this.counter - this.overflowCellsLimit;\r\n\r\n        if (counter > cellLength) {\r\n            counter = counter % cellLength;\r\n        }\r\n\r\n        if (counter < 0) {\r\n            return cellIndexInDOMTree;\r\n        } else {\r\n            positionIndex = cellIndexInDOMTree - counter;\r\n            if (positionIndex < 0) {\r\n                positionIndex = cellLength + positionIndex;\r\n            }\r\n        }\r\n\r\n        return positionIndex;\r\n    }\r\n\r\n    getImage(cellIndex: number) {\r\n        if (!this.images) {\r\n            return;\r\n        }\r\n\r\n        let imageIndex = this.getImageIndex(cellIndex);\r\n        let file = this.images[imageIndex];\r\n\r\n        if (file && !file.type) {\r\n            file.type = 'image';\r\n        }\r\n\r\n        return {\r\n            image: this.images[imageIndex],\r\n            imageIndex\r\n        };\r\n    }\r\n\r\n    getImageIndex(cellIndexInDOMTree: number) {\r\n        const positionIndex = this.getCellIndexInContainer(cellIndexInDOMTree);\r\n        let imageIndex;\r\n\r\n        if (this.counter > this.overflowCellsLimit) {\r\n            let cellLimitOverflow = this.counter - this.overflowCellsLimit;\r\n            imageIndex = positionIndex + cellLimitOverflow;\r\n\r\n            if (this.images && this.carouselProperties.loop) {\r\n                imageIndex = imageIndex % this.images.length;\r\n            }\r\n        } else {\r\n            imageIndex = cellIndexInDOMTree;\r\n        }\r\n\r\n        return imageIndex;\r\n    }\r\n\r\n    setCounter(value: number) {\r\n        this.counter = value;\r\n    }\r\n\r\n    init(carouselProperties: CarouselProperties) {\r\n        this.element = this.carouselProperties.cellsElement;\r\n        this.cells = this.element.children;\r\n        this.visibleWidth = this.carouselProperties.visibleWidth || this.element!.parentElement!.clientWidth;\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport interface Properties {\r\n    carouselProperties: CarouselProperties;\r\n}\r\n\r\nexport class Slide {\r\n    slideLength: number = 0;\r\n    isSlideInProgress: boolean = false;\r\n    direction: 'left' | 'right' | undefined;\r\n    counter: number = 0;\r\n    _counter: number = 0;\r\n    distance: number = 0;\r\n    distanceAbs: number = 0;\r\n    visibleWidth!: number;\r\n    isNotClickOnArrow: boolean = false;\r\n    initialPositionX: number = 0;\r\n    currentPositionX: number = 0;\r\n\r\n    /* The slide length has been limited by the limitSlideLength() method */\r\n    isSlideLengthLimited: boolean = false;\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get margin() {\r\n        return this.carouselProperties.margin;\r\n    }\r\n\r\n    get minSwipeDistance() {\r\n        return this.carouselProperties.minSwipeDistance;\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return this.utils.numberOfVisibleCells;\r\n    }\r\n\r\n    get visibleCellsOverflowContainer() {\r\n        return this.utils.visibleCellsOverflowContainer;\r\n    }\r\n\r\n    /* The position to which the container returns after each slide \r\n     * in the light DUM tree mode. \r\n     */\r\n    get fixedContainerPosition() {\r\n        return -(this.overflowCellsLimit * this.fullCellWidth);\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        return this.utils.overflowCellsLimit;\r\n    }\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    /* Number of cell elements in the DUM tree */\r\n    get cellLength() {\r\n        if (this.isLightDOM) {\r\n            return this.cells.cellLengthInLightDOMMode;\r\n        } else {\r\n            if (this.images) {\r\n                return this.images.length;\r\n            } else {\r\n                return this.cells.cellLength;\r\n            }\r\n        }\r\n    }\r\n\r\n    get isLightDOM() {\r\n        return this.carouselProperties.lightDOM || this.carouselProperties.loop;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties,\r\n        private utils: any,\r\n        private cells: any,\r\n        private container: any) {\r\n\r\n        this.init();\r\n    }\r\n\r\n    updateProperties(carouselProperties: CarouselProperties) {\r\n        this.carouselProperties = carouselProperties;\r\n        this.setVisibleWidth();\r\n    }\r\n\r\n    init() {\r\n        this.visibleWidth = this.carouselProperties.visibleWidth || this.carouselProperties.hostElement.clientWidth;\r\n    }\r\n\r\n    handleTouchstart() {\r\n        /* Touchstart event is not called for arrow */\r\n        this.isNotClickOnArrow = true;\r\n        this.isSlideLengthLimited = false;\r\n\r\n        if (!this.isSlideInProgress) {\r\n            this.initialPositionX = this.container.getCurrentPositionX();\r\n        }\r\n    }\r\n\r\n    handleTouchend() {\r\n        if (!this.isNotClickOnArrow) {\r\n            return;\r\n        }\r\n        this.currentPositionX = this.container.getCurrentPositionX();\r\n        this.distanceAbs = Math.abs(this.initialPositionX - this.currentPositionX);\r\n        this.distance = this.initialPositionX - this.currentPositionX;\r\n        this.direction = this.getDirection();\r\n        this.isNotClickOnArrow = false;\r\n        this.handleSlide();\r\n    }\r\n\r\n    handleTransitionend() {\r\n        this.setCounter();\r\n        this.isSlideInProgress = false;\r\n\r\n        if (this.isLightDOM) {\r\n            this.alignContainerFast();\r\n        }\r\n    }\r\n\r\n    handleSlide(customSlideLength: number | undefined = undefined) {\r\n        let isUsingButton = customSlideLength;\r\n        let newPositionX;\r\n\r\n        if (isUsingButton && this.isSlideInProgress || !this.direction) {\r\n            return;\r\n        }\r\n\r\n        /* Custom slide length is used in arrows */\r\n        if (customSlideLength) {\r\n            this.slideLength = this.limitSlideLength(customSlideLength);\r\n\r\n            if (!this.isSlideInProgress) {\r\n                this.initialPositionX = this.container.getCurrentPositionX();\r\n            }\r\n        } else {\r\n            this.slideLength = this.getSlideLength(this.distanceAbs);\r\n        }\r\n\r\n        /* Store intermediate counter value */\r\n        this._counter = this.getPreliminaryCounter();\r\n\r\n        if (this.direction === 'left') {\r\n            if (!customSlideLength) {\r\n                this.slideLength = this.limitSlideLength(this.getSlideLength(this.distanceAbs));\r\n            }\r\n\r\n            this._counter = this.getPreliminaryCounter();\r\n            let isSlidesEnd = this.isSlidesEnd(this._counter);\r\n            newPositionX = this.getPositionByIndex(this._counter);\r\n\r\n            if (isSlidesEnd) {\r\n                this._counter = this.counter;\r\n\r\n                newPositionX = this.getPositionByIndex(this.counter);\r\n                this.slideLength = 0;\r\n            }\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            if (!customSlideLength) {\r\n                this.slideLength = this.getSlideLength(this.distanceAbs);\r\n            }\r\n\r\n            if (this._counter < 0) {\r\n                this._counter = this.counter;\r\n                this.slideLength = this.counter;\r\n            }\r\n\r\n            newPositionX = this.getPositionByIndex(this.counter - this.slideLength);\r\n        }\r\n\r\n        if (this.container.getCurrentPositionX() !== newPositionX) {\r\n            this.isSlideInProgress = true;\r\n            this.container.transformPositionX(newPositionX);\r\n        }\r\n    }\r\n\r\n    next(length: number = 1) {\r\n        this.direction = 'left';\r\n        this.handleSlide(length);\r\n    }\r\n\r\n    prev(length: number = 1) {\r\n        this.direction = 'right';\r\n        this.handleSlide(length);\r\n    }\r\n\r\n    select(index: number) {\r\n        if (index > this.cellLength - 1) {\r\n            return;\r\n        }\r\n\r\n        if (index > this.counter) {\r\n            let length = index - this.counter;\r\n            this.next(length);\r\n        }\r\n\r\n        if (index < this.counter) {\r\n            let length = this.counter - index;\r\n            this.prev(length);\r\n        }\r\n    }\r\n\r\n    getPreliminaryCounter() {\r\n        if (this.direction === 'left') {\r\n            return this.counter + this.slideLength;\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            return this.counter - this.slideLength;\r\n        }\r\n\r\n        return 0;\r\n    }\r\n\r\n    /*  \r\n     * Limits the length of the slide during calls to the next() and prev() \r\n     * methods if the specified position is outside the cell length \r\n     */\r\n    limitSlideLength(slideLength: number) {\r\n        if (slideLength > 1) {\r\n            for (var i = 0; i < slideLength; i++) {\r\n                let newCounter = this.counter + (slideLength - i);\r\n\r\n                if (!this.isSlidesEnd(newCounter)) {\r\n                    slideLength = slideLength - i;\r\n                    this.isSlideLengthLimited = i > 0;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return slideLength;\r\n    }\r\n\r\n    /* Offset the container to show the last cell completely */\r\n    getPositionCorrection(counter:number) {\r\n        let correction = 0;\r\n        let isLastSlide = this.isLastSlide(counter);\r\n\r\n        if (this.carouselProperties.loop || this.direction === \"right\") {\r\n            return 0;\r\n        }\r\n\r\n        if (this.isSlideLengthLimited || isLastSlide) {\r\n            let cellsWidth = this.cells.cellLengthInLightDOMMode * this.fullCellWidth;\r\n\r\n            if (this.visibleWidth < cellsWidth) {\r\n                correction = -(this.numberOfVisibleCells * this.fullCellWidth - this.visibleWidth - this.margin);\r\n            }\r\n\r\n            if (correction >= -this.margin) {\r\n                correction = 0;\r\n            }\r\n        }\r\n\r\n        return correction;\r\n    }\r\n\r\n    getSlideLength(distanceAbs: number) {\r\n        let isLastSlide = this.isLastSlide(this.counter);\r\n\r\n        /* If the last cell does not fit entirely, then the \r\n         * length of the swipe to the left, from the extreme \r\n         * right position, may be shorter than usual. \r\n         */\r\n        if (isLastSlide && this.direction === \"right\") {\r\n            distanceAbs = distanceAbs + this.visibleWidth % this.fullCellWidth;\r\n        }\r\n\r\n        let length = Math.floor(distanceAbs / this.fullCellWidth);\r\n\r\n        if (distanceAbs % this.fullCellWidth >= this.minSwipeDistance) {\r\n            length++;\r\n        }\r\n\r\n        return length;\r\n    }\r\n\r\n    getDistanceAbs() {\r\n        return Math.abs(this.initialPositionX - this.currentPositionX);\r\n    }\r\n\r\n    getDirection() {\r\n        const direction = Math.sign(this.initialPositionX - this.currentPositionX);\r\n\r\n        if (direction === -1) {\r\n            return 'right';\r\n        }\r\n        if (direction === 1) {\r\n            return 'left';\r\n        }\r\n\r\n        return undefined;\r\n    }\r\n\r\n    isSlidesEnd(counter: number) {\r\n        let margin = this.visibleCellsOverflowContainer ? 1 : 0;\r\n        let imageLength = this.images ? this.images.length : this.cells.cellLength;\r\n\r\n        if (this.carouselProperties.loop) {\r\n            return false;\r\n        } else {\r\n            return (imageLength - counter + margin) < this.numberOfVisibleCells;\r\n        }\r\n    }\r\n\r\n    isLastSlide(counter: number) {\r\n        return this.isSlidesEnd(counter + 1)\r\n    }\r\n\r\n    setCounter() {\r\n        if (this.direction === 'left') {\r\n            this.counter = this.counter + this.slideLength;\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            this.counter = this.counter - this.slideLength;\r\n        }\r\n    }\r\n\r\n    getPositionByIndex(_counter: number) {\r\n        let correction = this.getPositionCorrection(this.counter + this.slideLength);\r\n        let position;\r\n\r\n        if (correction !== 0) {\r\n            correction = correction + this.fullCellWidth\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            correction = 0;\r\n        }\r\n\r\n        if (this.isLightDOM && this.isLightDOMMode(_counter) ||\r\n            this.isLightDOM && this.ifLeftDOMModeAtEnd(_counter)) {\r\n\r\n            let initialPosition = this.getPositionWithoutCorrection(this.initialPositionX);\r\n            let counterDifference = _counter - this.counter;\r\n            position = initialPosition - ((counterDifference * this.fullCellWidth) - correction);\r\n        } else {\r\n            position = -((_counter * this.fullCellWidth) - correction);\r\n        }\r\n\r\n        position = this.provideSafePosition(position);\r\n\r\n        return position;\r\n    }\r\n\r\n    provideSafePosition(position: number) {\r\n        const endPosition = this.container.getEndPosition();\r\n\r\n        if (this.direction === 'left') {\r\n            if (position > 0) {\r\n                position = 0;\r\n            }\r\n        }\r\n\r\n        if (this.direction === 'right') {\r\n            if (position < endPosition) {\r\n                position = endPosition;\r\n            }\r\n        }\r\n\r\n        return position;\r\n    }\r\n\r\n    getPositionWithoutCorrection(value: number) {\r\n        let remainder = Math.round(value) % this.fullCellWidth;\r\n\r\n        if (remainder !== 0) {\r\n            return value - (this.fullCellWidth + remainder);\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n\r\n    isNextArrowDisabled() {\r\n        return this.isLastSlide(this.counter) || \r\n        (!this.visibleCellsOverflowContainer && this.cellLength <= this.numberOfVisibleCells) ||\r\n        (this.visibleCellsOverflowContainer && this.cellLength < this.numberOfVisibleCells)\r\n    }\r\n\r\n    isPrevArrowDisabled() {\r\n        return this.counter === 0;\r\n    }\r\n\r\n    alignContainerFast() {\r\n        if (this.isLightDOMMode(this.counter)) {\r\n            let positionX = this.fixedContainerPosition;\r\n            this.container.transformPositionX(positionX, 0);\r\n\r\n            this.cells.setCounter(this.counter);\r\n            this.cells.lineUp();\r\n        } else if (this.ifLeftDOMModeToBeginning(this.counter)) {\r\n            /* If we have already exited the light DOM mode but \r\n             * the cells are still out of place \r\n             */\r\n            if (this.cells.ifSequenceOfCellsIsChanged()) {\r\n                let positionX = -(this.counter * this.fullCellWidth);\r\n                this.container.transformPositionX(positionX, 0);\r\n\r\n                this.cells.setCounter(this.counter);\r\n                this.cells.lineUp();\r\n            }\r\n        } else if (this.ifLeftDOMModeAtEnd(this.counter)) {\r\n            let containerPositionX = this.container.getCurrentPositionX();\r\n            let containerWidth = this.container.getWidth();\r\n            this.visibleWidth;\r\n\r\n            if (this.isLastSlide(this.counter) &&\r\n                containerWidth + containerPositionX >= this.visibleWidth) {\r\n                return;\r\n            }\r\n\r\n            let correction = this.getPositionCorrection(this.counter);\r\n\r\n            if (correction !== 0) {\r\n                correction = correction + this.fullCellWidth\r\n            }\r\n\r\n            if (this.direction === 'right') {\r\n                correction = 0;\r\n            }\r\n\r\n            let positionX = this.fixedContainerPosition + correction;\r\n\r\n            this.container.transformPositionX(positionX, 0);\r\n            this.cells.setCounter(this.counter);\r\n            this.cells.lineUp();\r\n        }\r\n    }\r\n\r\n    isLightDOMMode(counter: number) {\r\n        let flag;\r\n        let remainderOfCells = this.images.length - this.overflowCellsLimit - this.numberOfVisibleCells;\r\n\r\n        if (!this.isLightDOM) {\r\n            return false;\r\n        }\r\n\r\n        if (counter > this.overflowCellsLimit && this.direction === \"left\" &&\r\n            counter <= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (counter >= this.overflowCellsLimit && this.direction === \"right\" &&\r\n            counter < remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter > this.overflowCellsLimit && this.direction === \"left\" &&\r\n            this.counter <= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter >= this.overflowCellsLimit && this.direction === \"right\" &&\r\n            this.counter < remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    ifLeftDOMModeAtEnd(counter: number) {\r\n        let flag;\r\n        let remainderOfCells = this.images.length - this.overflowCellsLimit - this.numberOfVisibleCells;\r\n\r\n        if (counter >= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter >= remainderOfCells) {\r\n            flag = true;\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    ifLeftDOMModeToBeginning(counter: number) {\r\n        let flag;\r\n\r\n        if (counter <= this.overflowCellsLimit) {\r\n            flag = true;\r\n        }\r\n\r\n        if (this.counter <= this.overflowCellsLimit) {\r\n            flag = true;\r\n        }\r\n\r\n        return flag;\r\n    }\r\n\r\n    setVisibleWidth() {\r\n        this.visibleWidth = this.carouselProperties.visibleWidth || this.carouselProperties.hostElement.clientWidth;\r\n    }\r\n}","import {Properties as CarouselProperties} from './interfaces';\r\n\r\nexport class Utils {\r\n\r\n    get images() {\r\n        return this.carouselProperties.images;\r\n    }\r\n\r\n    get margin() {\r\n        return this.carouselProperties.margin;\r\n    }\r\n\r\n    get overflowCellsLimit() {\r\n        if (this.images && this.isImagesLessCellLimit) {\r\n            let overflowCellsLimit = Math.floor((this.images.length - this.numberOfVisibleCells) / 2);\r\n\r\n            if (overflowCellsLimit < 0) {\r\n                overflowCellsLimit = 0;\r\n            }\r\n            \r\n            return overflowCellsLimit;\r\n        } else {\r\n            return this.carouselProperties.overflowCellsLimit;\r\n        }\r\n    }\r\n\r\n    get isImagesLessCellLimit() {\r\n        return this.carouselProperties.overflowCellsLimit * 2 + this.numberOfVisibleCells > this.images.length;\r\n    }\r\n\r\n    get numberOfVisibleCells() {\r\n        return Math.ceil(this.visibleWidth / this.fullCellWidth);\r\n    }\r\n\r\n    get visibleCellsOverflowContainer() {\r\n        return (this.numberOfVisibleCells * this.fullCellWidth - this.margin) > this.visibleWidth;\r\n    }\r\n\r\n    get fullCellWidth() {\r\n        return this.carouselProperties.cellWidth + this.carouselProperties.margin;\r\n    }\r\n\r\n    get visibleWidth() {\r\n        return this.carouselProperties.visibleWidth || this.carouselProperties!.cellsElement!.parentElement!.clientWidth;\r\n    }\r\n\r\n    constructor(private carouselProperties: CarouselProperties) {\r\n\r\n    }\r\n\r\n    updateProperties(carouselProperties: CarouselProperties) {\r\n        this.carouselProperties = carouselProperties;\r\n    }\r\n\r\n    getStartX(event: any) {\r\n        const touches = event.touches;\r\n        const carouselElementPosition = this.getCarouselElementPosition()['left'];\r\n        let startX;\r\n\r\n        if (touches) {\r\n            startX = touches[0].clientX - carouselElementPosition;\r\n        } else {\r\n            startX = event.clientX - carouselElementPosition;\r\n        }\r\n\r\n        return startX;\r\n    }\r\n\r\n    getMoveX(event: any) {\r\n        const touches = event.touches;\r\n        const carouselElementPositionX = this.getCarouselElementPosition()['left'];\r\n\r\n        if (touches) {\r\n            return touches[0].clientX - carouselElementPositionX;\r\n        } else {\r\n            return event.clientX - carouselElementPositionX;\r\n        }\r\n    }\r\n\r\n    getCarouselElementPosition() {\r\n        return this.carouselProperties.hostElement.getBoundingClientRect();\r\n    }\r\n}","import {ChangeDetectorRef, Component, ElementRef, ViewChild, EventEmitter, HostBinding, HostListener, Input, Output, OnDestroy, SimpleChanges} from '@angular/core';\r\n\r\nimport {Images} from './interfaces';\r\nimport {Touches} from './touches';\r\nimport {Carousel} from './carousel';\r\nimport {Container} from './container';\r\nimport {Cells} from './cells';\r\nimport {Slide} from './slide';\r\nimport {Utils} from './utils';\r\nimport {Properties as CarouselProperties} from './interfaces';\r\n\r\n\r\n@Component({\r\n    selector: 'carousel, [carousel]',\r\n    templateUrl: './carousel.component.html',\r\n    styleUrls: ['./carousel.component.sass']\r\n})\r\n\r\nexport class CarouselComponent implements OnDestroy {\r\n    carousel:any;\r\n    container:any;\r\n    utils:any;\r\n    cells:any;\r\n    slide:any;\r\n    _id!: string;\r\n    _images!: Images;\r\n    touches: any;\r\n    landscapeMode: any;\r\n    minTimeout = 30;\r\n    isVideoPlaying: boolean = false;\r\n    _isCounter: boolean = false;\r\n    _width!: number;\r\n    _cellWidth: number | '100%' = 200;\r\n    _loop: boolean = false;\r\n    _lightDOM: boolean = false;\r\n    isMoving: boolean = false;\r\n    isNgContent: boolean = false;\r\n    cellLength!: number;\r\n    dotsArr: any;\r\n    carouselProperties!: CarouselProperties;\r\n    savedCarouselWidth!: number;\r\n\r\n    get isContainerLocked() {\r\n        if (this.carousel) {\r\n            return this.carousel.isContainerLocked;\r\n        }\r\n    }\r\n\r\n    get slideCounter() {\r\n        if (this.carousel) {\r\n            return this.carousel.slideCounter;\r\n        }\r\n    }\r\n\r\n    get lapCounter() {\r\n        if (this.carousel) {\r\n            return this.carousel.lapCounter;\r\n        }\r\n    }\r\n\r\n    get isLandscape() {\r\n        return window.innerWidth > window.innerHeight;\r\n    }\r\n\r\n    get isSafari(): any {\r\n        const ua = navigator.userAgent.toLowerCase();\r\n        if (ua.indexOf('safari') !== -1) {\r\n            return !(ua.indexOf('chrome') > -1);\r\n        }\r\n    }\r\n\r\n    get counter() {\r\n        let counter;\r\n\r\n        if (this.loop) {\r\n            counter = this.slideCounter % this.cellLength;\r\n        } else {\r\n            counter = this.slideCounter;\r\n        }\r\n\r\n        return counter + 1 + this.counterSeparator + this.cellLength;\r\n    }\r\n\r\n    get cellsElement() {\r\n        return this.elementRef.nativeElement.querySelector('.carousel-cells');\r\n    }\r\n\r\n    get isArrows() {\r\n        return this.arrows && !this.freeScroll;\r\n    }\r\n\r\n    get isCounter() {\r\n        return this._isCounter && this.cellLength > 1;\r\n    }\r\n\r\n    get activeDotIndex() {\r\n        return this.slideCounter % this.cellLength;\r\n    }\r\n\r\n    get cellLimit() {\r\n        if (this.carousel) {\r\n            return this.carousel.cellLimit;\r\n        }\r\n    }\r\n\r\n    get carouselWidth() {\r\n        return this.elementRef.nativeElement.clientWidth;\r\n    }\r\n\r\n    @Output() events: EventEmitter < any > = new EventEmitter < any > ();\r\n\r\n    @Input() id!: number;\r\n    @Input() height: number = 200;\r\n    @Input() width!: number;\r\n    @Input() autoplay: boolean = false;\r\n    @Input() autoplayInterval: number = 5000;\r\n    @Input() pauseOnHover: boolean = true;\r\n    @Input() dots: boolean = false;\r\n    @Input() borderRadius!: number;\r\n    @Input() margin: number = 10;\r\n    @Input() objectFit: 'contain' | 'cover' | 'none' = 'cover';\r\n    @Input() minSwipeDistance: number = 10;\r\n    @Input() transitionDuration: number = 200;\r\n    @Input() transitionTimingFunction: 'ease' | 'ease-in' | 'ease-out' | 'ease-in-out' | 'linear' = 'ease-out';\r\n    @Input() videoProperties: any;\r\n    @Input() counterSeparator: string = \" / \";\r\n    @Input() overflowCellsLimit: number = 3;\r\n    @Input() listeners: 'auto' | 'mouse and touch' = 'mouse and touch';\r\n    @Input() cellsToShow!: number;\r\n    @Input() cellsToScroll: number = 1;\r\n    @Input() freeScroll: boolean = false;\r\n    @Input() arrows: boolean = true;\r\n    @Input() arrowsOutside: boolean = false;\r\n    @Input() arrowsTheme: 'light' | 'dark' = 'light';\r\n\r\n    @Input()\r\n    set images(images: Images & any) {\r\n        this._images = images;\r\n    }\r\n    get images() {\r\n        return this._images;\r\n    }\r\n\r\n    @Input('cellWidth') set cellWidth(value: number | '100%') {\r\n        if (value) {\r\n            this._cellWidth = value;\r\n        }\r\n    }\r\n\r\n    @Input('counter') set isCounter(value: boolean) {\r\n        if (value) {\r\n            this._isCounter = value;\r\n        }\r\n    }\r\n\r\n    @Input('loop') set loop(value: boolean) {\r\n        if (value) {\r\n            this._loop = value;\r\n        }\r\n    }\r\n\r\n    get loop() {\r\n        if (this.images) {\r\n            return this._loop;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @Input('lightDOM') set lightDOM(value: boolean) {\r\n        if (value) {\r\n            this._lightDOM = value;\r\n        }\r\n    }\r\n\r\n    get lightDOM() {\r\n        if (this.images) {\r\n            return this._lightDOM;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    @HostBinding('class.carousel') hostClassCarousel: boolean = true;\r\n    @HostBinding('style.height') hostStyleHeight!: string;\r\n    @HostBinding('style.width') hostStyleWidth!: string;\r\n\r\n    @HostListener('window:resize', ['$event'])\r\n    onWindowResize(event: any) {\r\n        if (this.utils.visibleWidth !== this.savedCarouselWidth) {\r\n            this.resize();\r\n        }\r\n    }\r\n\r\n    @HostListener('mousemove', ['$event'])\r\n    onMousemove(event: MouseEvent) {\r\n        if (this.autoplay && this.pauseOnHover) {\r\n            this.carousel.stopAutoplay();\r\n        }\r\n    }\r\n\r\n    @HostListener('mouseleave', ['$event'])\r\n    onMouseleave(event: MouseEvent) {\r\n        if (this.autoplay && this.pauseOnHover) {\r\n            this.carousel.autoplay();\r\n        }\r\n    }\r\n\r\n    constructor(\r\n        private elementRef: ElementRef,\r\n        private ref: ChangeDetectorRef) {\r\n\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.isNgContent = this.cellsElement.children.length > 0;\r\n\r\n        this.touches = new Touches({\r\n            element: this.cellsElement,\r\n            listeners: this.listeners,\r\n            mouseListeners: {\r\n                \"mousedown\": \"handleMousedown\",\r\n                \"mouseup\": \"handleMouseup\"\r\n            }\r\n        });\r\n\r\n        this.touches.on('touchstart', this.handleTouchstart);\r\n        this.touches.on('horizontal-swipe', this.handleHorizontalSwipe);\r\n        this.touches.on('touchend', this.handleTouchend);\r\n        this.touches.on('mousedown', this.handleTouchstart);\r\n        this.touches.on('mouseup', this.handleTouchend);\r\n        this.touches.on('tap', this.handleTap);\r\n\r\n        this.setDimensions();\r\n    }\r\n\r\n    ngAfterViewInit() {\r\n        this.initCarousel();\r\n        this.cellLength = this.getCellLength();\r\n        this.dotsArr = Array(this.cellLength).fill(1);\r\n        this.ref.detectChanges();\r\n        this.carousel.lineUpCells();\r\n        this.savedCarouselWidth = this.carouselWidth;\r\n\r\n        /* Start detecting changes in the DOM tree */\r\n        this.detectDomChanges();\r\n    }\r\n\r\n    ngOnChanges(changes: SimpleChanges) {\r\n        if (changes.width || changes.height || changes.images) {\r\n            this.setDimensions();\r\n            this.initCarousel();\r\n            this.carousel.lineUpCells();\r\n            this.ref.detectChanges();\r\n        }\r\n    }\r\n\r\n    ngOnDestroy() {\r\n        this.touches.destroy();\r\n        //this.carousel.destroy();\r\n    }\r\n\r\n    initCarousel() {\r\n        this.carouselProperties = {\r\n            id: this.id,\r\n            cellsElement: this.elementRef.nativeElement.querySelector('.carousel-cells'),\r\n            hostElement: this.elementRef.nativeElement,\r\n            images: this.images,\r\n            cellWidth: this.getCellWidth(),\r\n            loop: this.loop,\r\n            autoplayInterval: this.autoplayInterval,\r\n            overflowCellsLimit: this.overflowCellsLimit,\r\n            visibleWidth: this.width,\r\n            margin: this.margin,\r\n            minSwipeDistance: this.minSwipeDistance,\r\n            transitionDuration: this.transitionDuration,\r\n            transitionTimingFunction: this.transitionTimingFunction,\r\n            videoProperties: this.videoProperties,\r\n            eventHandler: this.events,\r\n            freeScroll: this.freeScroll,\r\n            lightDOM: this.lightDOM\r\n        };\r\n\r\n        this.utils = new Utils(this.carouselProperties);\r\n        this.cells = new Cells(this.carouselProperties, this.utils);\r\n        this.container = new Container(this.carouselProperties, this.utils, this.cells);\r\n        this.slide = new Slide(this.carouselProperties, this.utils, this.cells, this.container);\r\n        this.carousel = new Carousel(this.carouselProperties, this.utils, this.cells, this.container, this.slide);\r\n    \r\n        if (this.autoplay) {\r\n            this.carousel.autoplay();\r\n        }\r\n    }\r\n\r\n    resize() {\r\n        this.landscapeMode = this.isLandscape;\r\n        this.savedCarouselWidth = this.carouselWidth;\r\n\r\n        this.carouselProperties.cellWidth = this.getCellWidth();\r\n        this.cells.updateProperties(this.carouselProperties);\r\n        this.carousel.updateProperties(this.carouselProperties);\r\n        this.container.updateProperties(this.carouselProperties);\r\n        this.slide.updateProperties(this.carouselProperties);\r\n        this.utils.updateProperties(this.carouselProperties);\r\n        this.carousel.lineUpCells();\r\n        this.slide.select(0);\r\n        this.ref.detectChanges();\r\n    }\r\n\r\n    detectDomChanges() {\r\n        const observer = new MutationObserver((mutations) => {\r\n            this.onDomChanges();\r\n        });\r\n\r\n        var config = {\r\n            attributes: true,\r\n            childList: true,\r\n            characterData: true\r\n        };\r\n        observer.observe(this.cellsElement, config);\r\n    }\r\n\r\n    onDomChanges() {\r\n        this.cellLength = this.getCellLength();\r\n        this.carousel.lineUpCells();\r\n        this.ref.detectChanges();\r\n    }\r\n\r\n    setDimensions() {\r\n        this.hostStyleHeight = this.height + 'px';\r\n        this.hostStyleWidth = this.width + 'px';\r\n    }\r\n\r\n    getImage(index:number) {\r\n        return this.carousel.getImage(index);\r\n    }\r\n\r\n    handleTouchstart = (event: any) => {\r\n        this.touches.addEventListeners(\"mousemove\", \"handleMousemove\");\r\n        this.carousel.handleTouchstart(event);\r\n        this.isMoving = true;\r\n    }\r\n\r\n    handleHorizontalSwipe = (event: any) => {\r\n        event.preventDefault();\r\n        this.carousel.handleHorizontalSwipe(event);\r\n    }\r\n\r\n    handleTouchend = (event: any) => {\r\n        const touches = event.touches;\r\n        this.carousel.handleTouchend(event);\r\n        this.touches.removeEventListeners(\"mousemove\", \"handleMousemove\");\r\n        this.isMoving = false;\r\n    }\r\n\r\n    handleTap = (event: any) => {\r\n        let outboundEvent: any = {\r\n            name: 'click'\r\n        }\r\n        let nodes = Array.prototype.slice.call(this.cellsElement.children);\r\n        let cellElement = event.srcElement.closest(\".carousel-cell\");\r\n        const i = nodes.indexOf(cellElement);\r\n        const cellIndex = nodes.indexOf(cellElement);\r\n\r\n        if (this.images) {\r\n            //outboundEvent.fileIndex = this.carousel.getFileIndex(i);\r\n            //outboundEvent.file = this.carousel.getFile(cellIndex);\r\n        } else {\r\n            outboundEvent.cellIndex = cellIndex;\r\n        }\r\n    }\r\n\r\n    handleTransitionendCellContainer(event:any) {\r\n        if (event.target['className'] === 'carousel-cells') {\r\n            this.carousel.handleTransitionend();\r\n        }\r\n    }\r\n\r\n    getCellWidth() {\r\n        let elementWidth = this.carouselWidth;\r\n\r\n        if (this.cellsToShow) {\r\n            let margin = this.cellsToShow > 1 ? this.margin : 0;\r\n            let totalMargin = margin * (this.cellsToShow - 1);\r\n            return (elementWidth - totalMargin) / this.cellsToShow;\r\n        }\r\n\r\n        if (this._cellWidth === '100%') {\r\n            return elementWidth;\r\n        } else {\r\n            return this._cellWidth;\r\n        }\r\n    }\r\n\r\n    next() {\r\n        this.carousel.next(this.cellsToScroll);\r\n        this.carousel.stopAutoplay();\r\n    }\r\n\r\n    prev() {\r\n        this.carousel.prev(this.cellsToScroll);\r\n        this.carousel.stopAutoplay();\r\n    }\r\n\r\n    isNextArrowDisabled() {\r\n        if (this.carousel) {\r\n            return this.carousel.isNextArrowDisabled();\r\n        }\r\n    }\r\n\r\n    isPrevArrowDisabled() {\r\n        if (this.carousel) {\r\n            return this.carousel.isPrevArrowDisabled();\r\n        }\r\n    }\r\n\r\n    getCellLength() {\r\n        if (this.images) {\r\n            return this.images.length;\r\n        } else {\r\n            return this.cellsElement.children.length;\r\n        }\r\n    }\r\n}","import {NgModule} from '@angular/core';\r\nimport {CommonModule} from '@angular/common';\r\nimport {CarouselComponent} from './carousel.component';\r\n\r\n@NgModule({\r\n    declarations: [\r\n        CarouselComponent\r\n    ],\r\n    imports: [\r\n        CommonModule\r\n    ],\r\n    exports: [\r\n        CarouselComponent\r\n    ],\r\n    providers: [\r\n\r\n    ],\r\n    bootstrap: [\r\n        \r\n    ],\r\n    entryComponents: [\r\n        CarouselComponent\r\n    ]\r\n})\r\nexport class IvyCarouselModule { }\r\n"]}